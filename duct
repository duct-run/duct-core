# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2022 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

set -eu

if [[ "$0" == "${BASH_SOURCE[0]}" ]]
then
  echo "Don't run $0 directly! Use the 'source', Luke..."
  exit 1
fi

# dirs
# shellcheck disable=SC2155
declare -r DUCT_ROOT_DIR="$( cd "${BASH_SOURCE[0]%/*}" && echo "$PWD" )"
declare -r DUCT_PLUG_DIR="${DUCT_ROOT_DIR}/plug"

# shellcheck disable=SC2034
declare DUCT_TMP_DIR="${DUCT_TMP_DIR:-${TMPDIR:-"$HOME/tmp"}}"
declare DUCT_WORK_DIR="${DUCT_WORK_DIR:-$PWD}"
declare DUCT_TERM="${DUCT_TERM:-${TERM:-"dumb"}}"
declare DUCT_TERM_PROGRAM="${DUCT_TERM_PROGRAM:-${TERM_PROGRAM:-"none"}}"

# self
# shellcheck disable=SC2034
if [[ -n "${BASH_SOURCE[0]+x}" ]]
then
  declare -r DUCT_SELF_FILE="${BASH_SOURCE[0]:?}"
  declare -r DUCT_SELF_NAME="${DUCT_SELF_FILE##*/}"
  declare -r DUCT_SELF_PATH="${DUCT_SELF_FILE%/*}"
fi

# script
# shellcheck disable=SC2034
if [[ -n "${BASH_SOURCE[1]+x}" ]]
then
  declare -r DUCT_SCRIPT_FILE="${BASH_SOURCE[1]:?}"
  declare -r DUCT_SCRIPT_NAME="${DUCT_SCRIPT_FILE##*/}"
  declare -r DUCT_SCRIPT_PATH="${DUCT_SCRIPT_FILE%/*}"
fi

# info
# shellcheck disable=SC2034
declare -r DUCT_URL="https://duct.run/"
# shellcheck disable=SC2034,SC2155
declare -r DUCT_VERSION="$( < "${DUCT_ROOT_DIR}/.duct-version" )"

# internal

# deps: duct-msg
# intl: true
# life: core
# desc: Check duct internal source.
# opts:
__duct_intl() {
  local INTL_RUN=0
  local INTL_FUNC=""

  for FUNC in "${FUNCNAME[@]}"
  do
    if [[ "$FUNC" == "source" ]]
    then
      INTL_RUN=1
    fi
  done

  if [[ "$INTL_RUN" -eq 0 ]]
  then
    INTL_FUNC="${FUNCNAME[1]}"
    INTL_FUNC="${INTL_FUNC/#__}"
    INTL_FUNC="${INTL_FUNC//_/ }"

    __duct_msg e "'$INTL_FUNC' internal only!"
    return 1
  fi
}
readonly -f __duct_intl

# environment (also loads duct-msg)
# shellcheck disable=SC1091
source "${DUCT_PLUG_DIR}/core/duct-env"
__duct_env

# config
# shellcheck disable=SC1091
source "${DUCT_PLUG_DIR}/core/duct-conf"
__duct_conf

# install and load core plugins
# shellcheck disable=SC1091
source "${DUCT_PLUG_DIR}/core/duct-plug"
__duct_plug_install core
__duct_plug_load core

# bash
__duct_bash

# init & umask
__duct_init
__duct_umask

# install and load main & vendor plugins
__duct_plug_install main
__duct_plug_load main
__duct_plug_install vendor
__duct_plug_load vendor

# bash shopt
__duct_bash_shopt

# duct

# Enable/disable duct caller debug.
declare -g DUCT_DEBUG="${DUCT_DEBUG:-false}"

# deps: duct-msg
# intl: true
# life: core
# desc: Main duct plugin and command processor.
# opts: <plugin> <command> [extra-options]
duct() {
  local -a DUCT_OPTS=( "$@" )

  local -a DUCT_KEEP
  local DUCT
  local DUCT_BASE
  local DUCT_CALL
  local DUCT_FUNC=""

  if [[ -z "${DUCT_OPTS[*]}" ]] || [[ "${DUCT_OPTS[*]}" =~ ^(logo|version)$ ]]
  then
    __duct_logo
    return
  fi

  DUCT_BASE="${DUCT_OPTS[0]}"
  unset "DUCT_OPTS[0]"

  # rewrite index
  DUCT_OPTS=( "${DUCT_OPTS[@]}" )
  DUCT_CALL="__duct_${DUCT_BASE}"

  if [[ "$DUCT_DEBUG" == true ]]
  then
    __duct_msg d "base: $DUCT_BASE"
    __duct_msg d "opts: ${DUCT_OPTS[*]}"
  fi

  # handle plugin direct function calls
  if [[ "$( type -t "${DUCT_CALL}" )" == "function" ]]
  then
    DUCT_FUNC="$DUCT_CALL"

    if [[ "$DUCT_DEBUG" == true ]]
    then
      __duct_msg d "func: $DUCT_FUNC"
    fi
  fi

  # handle plugin sub function calls
  for (( DUCT=${#DUCT_OPTS[@]}-1; DUCT>=0; DUCT--))
  do
    DUCT_TEST="${DUCT_CALL}_${DUCT_OPTS[*]:0:(( DUCT + 1 ))}"
    DUCT_TEST="${DUCT_TEST// /_}"

    if [[ "$( type -t "${DUCT_TEST}" )"  == "function"  ]]
    then
      DUCT_FUNC="$DUCT_TEST"

      if [[ "$DUCT_DEBUG" == true  ]]
      then
        __duct_msg d "func: $DUCT_TEST"
      fi
      break
    else
      DUCT_KEEP+=( "${DUCT_OPTS[DUCT]}" )

      if [[ "$DUCT_DEBUG" == true ]]
      then
        __duct_msg d "keep: ${DUCT_KEEP[*]}"
      fi
    fi
  done

  # rewrite opts
  DUCT_OPTS=( "${DUCT_KEEP[@]}" )
  unset DUCT_KEEP

  if [[ "$DUCT_DEBUG" == true ]]
  then
    __duct_msg d "opts: ${DUCT_OPTS[*]}"
  fi

  if [[ -z "$DUCT_FUNC" ]]
  then
    __duct_msg e "'duct $DUCT_BASE ${DUCT_OPTS[*]:-\b}' not found!"
    return 1
  else
    if [[ "$DUCT_DEBUG" == true ]]
    then
      __duct_msg d "call: $DUCT_FUNC ${DUCT_OPTS[*]}"
    fi
    "$DUCT_FUNC" "${DUCT_OPTS[@]}"
  fi
}
readonly -f duct

# show duct logo and version
__duct_logo
