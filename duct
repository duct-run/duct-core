# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2022 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

set -eu

if [[ "$0" == "${BASH_SOURCE[0]}" ]]
then
  echo "Don't run $0 directly! Use the 'source', Luke..."
  exit 1
fi

# dirs
# shellcheck disable=SC2155
declare -r DUCT_ROOT_DIR="$( cd "${BASH_SOURCE[0]%/*}" && echo "$PWD" )"
declare -r DUCT_PLUG_DIR="${DUCT_ROOT_DIR}/plug"

# shellcheck disable=SC2034
declare DUCT_TMP_DIR="${DUCT_TMP_DIR:-${TMPDIR:-"$HOME/tmp"}}"
declare DUCT_WORK_DIR="${DUCT_WORK_DIR:-$PWD}"
declare DUCT_TERM="${DUCT_TERM:-${TERM:-"dumb"}}"

# self
# shellcheck disable=SC2034
if [[ -n "${BASH_SOURCE[0]+x}" ]]
then
  declare -r DUCT_SELF_FILE="${BASH_SOURCE[0]:?}"
  declare -r DUCT_SELF_NAME="${DUCT_SELF_FILE##*/}"
  declare -r DUCT_SELF_PATH="${DUCT_SELF_FILE%/*}"
fi

# script
# shellcheck disable=SC2034
if [[ -n "${BASH_SOURCE[1]+x}" ]]
then
  declare -r DUCT_SCRIPT_FILE="${BASH_SOURCE[1]:?}"
  declare -r DUCT_SCRIPT_NAME="${DUCT_SCRIPT_FILE##*/}"
  declare -r DUCT_SCRIPT_PATH="${DUCT_SCRIPT_FILE%/*}"
fi

# environment (also loads duct-msg)
# shellcheck disable=SC1091
source "${DUCT_PLUG_DIR}/core/duct-env"
__duct_env

# config
# shellcheck disable=SC1091
source "${DUCT_PLUG_DIR}/core/duct-conf"
__duct_conf

# install and load core plugins
# shellcheck disable=SC1091
source "${DUCT_PLUG_DIR}/core/duct-plug"
__duct_plug_install core
__duct_plug_load core

# init & umask
__duct_init
__duct_umask

# install and load main & vendor plugins
__duct_plug_install main
__duct_plug_load main
__duct_plug_install vendor
__duct_plug_load vendor

# duct

# deps: duct-msg
# intl: true
# life: core
# desc: Main duct plugin and command processor.
# opts: <plugin> <command> [extra-options]
duct() {
  local -a DUCT_OPTS=( "$@" )
  local DUCT_CALL
  local DUCT_FUNC=""
  local DUCT_PLUG

  if [[ -z "${DUCT_OPTS[*]}" ]] || [[ "${DUCT_OPTS[*]}" =~ ^(logo|version)$ ]]
  then
    __duct_logo
    return
  fi

  DUCT_PLUG="${DUCT_OPTS[0]}"
  unset "DUCT_OPTS[0]"
  DUCT_OPTS=( "${DUCT_OPTS[@]}" )
  DUCT_CALL="__duct_${DUCT_PLUG}"

  # handle direct calls
  if [[ "$( type -t "${DUCT_CALL}" )" == "function" ]]
  then
    DUCT_FUNC="$DUCT_CALL"
  fi

  # get function from opts
  for OPTS in "${DUCT_OPTS[@]}"
  do
    DUCT_CALL+="_${OPTS}"
    if [[ "$( type -t "${DUCT_CALL}" )" == "function" ]]
    then
      DUCT_FUNC="$DUCT_CALL"
    fi
  done

  # remove function from opts
  for _FUNC in ${DUCT_FUNC//_/ }
  do
    for _IDX in "${!DUCT_OPTS[@]}"
    do
      if [[ "${DUCT_OPTS[$_IDX]}" == "$_FUNC" ]]
      then
        unset "DUCT_OPTS[_IDX]"
      fi
    done
  done
  DUCT_OPTS=( "${DUCT_OPTS[@]}" )

  if [[ -z "$DUCT_FUNC" ]]
  then
    __duct_msg e "'duct $DUCT_PLUG ${DUCT_OPTS[*]:-\b}' not found!"
    return 1
  else
    $DUCT_FUNC "${DUCT_OPTS[@]}"
  fi
}
readonly -f duct

# show duct logo and version
__duct_logo
