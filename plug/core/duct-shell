# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2022-2023 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# @plug duct-shell
# @desc Shell commands as pure Bash alternative.

# @func duct basename

# @deps duct-msg
# @intl false
# @life core
# @desc Return filename portion of pathname, with optional suffix removal.
# @opts <pathname> [suffix]
__duct_basename() {
  local BASENAME_PATHNAME="${1:-}"
  local BASENAME_SUFFIX="${2:-}"

  if [[ -z "$BASENAME_PATHNAME" ]]
  then
    __duct_msg e "no pathname! (${DUCT_SCRIPT_NAME}:${BASH_LINENO[1]})"
    return 1
  fi

  BASENAME_PATHNAME="${BASENAME_PATHNAME##*/}"
  BASENAME_PATHNAME="${BASENAME_PATHNAME%"${BASENAME_SUFFIX}"}"

  printf "%s\n" "$BASENAME_PATHNAME"
}
readonly -f __duct_basename

# @func duct cd

# @deps duct-msg
# @intl false
# @life core
# @desc Change directory.
# @opts <directory>
__duct_cd() {
  local CD_DIR="${1:-}"

  if [[ -z "$CD_DIR" ]]
  then
    __duct_msg e "no directory! (${DUCT_SCRIPT_NAME}:${BASH_LINENO[1]})"
    return 1
  fi

  if [[ -d "$CD_DIR" ]]
  then
    __duct_run cd "$CD_DIR"
  else
    __duct_msg e "$CD_DIR directory not found! (${DUCT_SCRIPT_NAME}:${BASH_LINENO[1]})"
    return 1
  fi
}

# @func duct dirname

# @deps duct-msg
# @intl false
# @life core
# @desc Return directory portion of pathname.
# @opts <pathname>
__duct_dirname() {
  local DIRNAME_PATHNAME="${1:-}"

  if [[ -z "$DIRNAME_PATHNAME" ]]
  then
    __duct_msg e "no pathname! (${DUCT_SCRIPT_NAME}:${BASH_LINENO[1]})"
    return 1
  fi

  printf "%s\n" "${DIRNAME_PATHNAME%/*}"
}

# @func duct date

# @fvar Default date and time `strftime` format.
declare -g DUCT_DATE_FORMAT=${DUCT_DATE_FORMAT:-"%F %T"}

# @deps duct-msg
# @intl false
# @life core
# @desc Print current date and time.
# @opts [format]
__duct_date() {
  local DATE_FORMAT="${1:-"$DUCT_DATE_FORMAT"}"

  __duct_msg d "format $DATE_FORMAT"

  printf "%($DATE_FORMAT)T\\n" "-1"
}

# @func duct find

# @deps duct-msg
# @intl false
# @life core
# @desc Simple `find` in pure Bash.
# @opts <path> [type] [match|regex]
__duct_find() {
  local FIND_PATH="${1:-"$PWD"}"
  local FIND_TYPE="${2:-""}"
  local FIND_MATCH="${3:-""}"

  local FIND_ITEM

  __duct_msg d "searching $FIND_PATH type:${FIND_TYPE:-"all"} match:${FIND_MATCH:-"all"}"

  for FIND_ITEM in "${FIND_PATH}"/**/*
  do
    # type
    if [[ -n "${FIND_TYPE}" ]]
    then
      case "$FIND_TYPE"
      in
        d|dir|directory)
          if [[ ! -d "$FIND_ITEM" ]]
          then
            continue
          fi
        ;;
        f|file)
          if [[ ! -f "$FIND_ITEM" ]]
          then
            continue
          fi
        ;;
      esac
    fi

    # match
    if [[ -n "$FIND_MATCH" ]]
    then
      if [[ ! "$FIND_ITEM" =~ $FIND_MATCH ]]
      then
        continue
      fi
    fi

    printf "%s\n" "$FIND_ITEM"
  done

  __duct_msg d "runtime: ${SECONDS}s"
}

# @func duct urlencode

# @fvar Regex match to exclude from encoding.
declare -g DUCT_URLENCODE_EXCLUDE="${DUCT_URLENCODE_EXCLUDE:-"[A-Za-z0-9._-]"}"

# @deps duct-msg
# @intl false
# @life core
# @desc Percent-encode a string.
# @opts <string>
__duct_urlencode() {
  local STR="${1:-}"

  local URL

  if [[ -z "$STR" ]]
  then
    __duct_msg e "no string! (${DUCT_SCRIPT_NAME}:${BASH_LINENO[1]})"
    return 1
  else
    __duct_msg d "$STR"
  fi

  for (( URL=0; URL<${#STR}; URL++ ))
  do
    if [[ "${STR:$URL:1}" =~ $DUCT_URLENCODE_EXCLUDE ]]
    then
      printf "%s" "${STR:$URL:1}"
    else
      printf "%%%02X" "'${STR:$URL:1}"
    fi
  done
  printf "\n"
}

# @func duct urldecode

# @deps duct-msg
# @intl false
# @life core
# @desc Decode a percent-encoded string.
# @opts <string>
__duct_urldecode() {
  local STR="${1:-}"

  if [[ -z "$STR" ]]
  then
    __duct_msg e "no string! (${DUCT_SCRIPT_NAME}:${BASH_LINENO[1]})"
    return 1
  else
    __duct_msg d "$STR"
  fi

  STR="${STR//+/ }"
  printf "%s\n" "${STR//%/\\x}"
}

# @func duct realpath

# @deps duct-msg
# @intl false
# @life beta
# @desc Get real path of a file
# @opts <file>
__duct_realpath() {
  local FILE="${1:-}"

  if [[ -z "$FILE" ]]
  then
    __duct_msg e "no file! (${DUCT_SCRIPT_NAME}:${BASH_LINENO[1]})"
    return 1
  fi

  if [[ ! -e "$FILE" ]]
  then
    __duct_msg e "$FILE not found! (${DUCT_SCRIPT_NAME}:${BASH_LINENO[1]})"
    return 1
  fi

  if [[ ! -L "$FILE" ]]
  then
    __duct_msg d "$FILE is not a symlink"
  fi

  while [[ -L "$FILE" ]] && [[ "$(ls -l "$FILE" )" =~ -\>\ (.*) ]]
  do
    LINK="${BASH_REMATCH[1]}"
    DIRNAME="$( __duct_dirname "$FILE" )"

    if [[ ! "$LINK" =~ ^/ ]]
    then
      DIRNAME="${DIRNAME}/$( __duct_dirname "$LINK" )"
    else
      DIRNAME="$( __duct_dirname "$LINK" )"
    fi

    DIRNAME="$( __duct_dirname "$DIRNAME" )"
    DIRNAME="$( cd "$DIRNAME" && echo "$PWD" )"
    FILE="${DIRNAME}/${FILE##*/}"
  done

  echo "$FILE"
}

# @func duct source

# @deps duct-msg
# @intl false
# @life testing
# @desc Source a variables file and export with optional prefix.
# @opts <source-file> [prefix]
__duct_source() {
  local SRC_FILE="${1:-}"
  local SRC_PREFIX="${2:-}"
  local -a SRC_CONTENT

  local SRC
  local VAR
  local VAL

  if [[ -z "$SRC_FILE" ]]
  then
    __duct_msg e "no source file! (${DUCT_SCRIPT_NAME}:${BASH_LINENO[1]})"
    return 1
  fi

  if [[ ! -e "$SRC_FILE" ]]
  then
    __duct_msg e "$SRC_FILE not found! (${DUCT_SCRIPT_NAME}:${BASH_LINENO[1]})"
    return 1

  elif [[ -s "$SRC_FILE" ]]
  then
    # shellcheck disable=SC1090
    readarray -t SRC_CONTENT < <( ( set -x; source "$SRC_FILE"; set +x ) 2>&1 )

    for SRC in "${SRC_CONTENT[@]}"
    do
      if [[ "$SRC" =~ ([A-Z_]+)=([[:alnum:][:punct:][:blank:]]+) ]]
      then
        VAR="${BASH_REMATCH[1]:?}"
        VAL="${BASH_REMATCH[2]:?}"

        VAL="${VAL//"'"}"   # remove '

        if [[ -n "$SRC_PREFIX" ]]
        then
          __duct_msg d "export ${SRC_PREFIX}_${VAR}=${VAL}"
          export "${SRC_PREFIX}_${VAR}=${VAL}"
        else
          __duct_msg d "export ${VAR}=${VAL}"
          export "${VAR}=${VAL}"
        fi
      fi
    done
  else
    __duct_msg w "$SRC_FILE is empty! (${DUCT_SCRIPT_NAME}:${BASH_LINENO[1]})"
  fi
}

# @func duct cat

# @deps duct-msg
# @intl false
# @life core
# @desc Bash `cat` alternative, supports stdin.
# @opts <file(s)>
__duct_cat() {
  local CAT_FILES=( "$@" )

  local -a CAT_DATA
  local CAT_FILE

  if [[ -z "${CAT_FILES[*]+x}" ]]
  then
    readarray -t -n 0 CAT_DATA
    printf "%s\n" "${CAT_DATA[@]}"
  else
    for CAT_FILE in "${CAT_FILES[@]}"
    do
      if [[ -s "$CAT_FILE" ]]
      then
        mapfile -t -n 0 CAT_DATA < "$CAT_FILE"
        printf "%s\n" "${CAT_DATA[@]}"
      fi
    done
  fi
}

# @func duct head

# @deps duct-msg
# @intl false
# @life core
# @desc Bash `head` alternative, supports stdin.
# @opts <lines> <file>
__duct_head() {
  local HEAD_LINES="${1:-0}"
  local HEAD_FILE="${2:-}"

  local -a HEAD_DATA

  if [[ -z "$HEAD_FILE" ]]
  then
    readarray -t -n "$HEAD_LINES" HEAD_DATA
  elif [[ -s "$HEAD_FILE" ]]
  then
    mapfile -t -n "$HEAD_LINES" HEAD_DATA < "$HEAD_FILE"
  fi

  if [[ -n "${HEAD_DATA[*]+x}" ]]
  then
    printf "%s\n" "${HEAD_DATA[@]}"
  else
    __duct_msg w "emtpy result!"
  fi
}

# @func duct tail

# @deps duct-msg
# @intl false
# @life core
# @desc Bash `tail` alternative.
# @opts <lines> <file>
__duct_tail() {
  local TAIL_LINES="${1:-0}"
  local TAIL_FILE="${2:-}"

  local -a TAIL_DATA

  if [[ -z "$TAIL_FILE" ]]
  then
    readarray -t -n 0 TAIL_DATA
  elif [[ -s "$TAIL_FILE" ]]
  then
    mapfile -t -n 0 TAIL_DATA < "$TAIL_FILE"
  fi

  if [[ -n "${TAIL_DATA[*]+x}" ]]
  then
    printf "%s\n" "${TAIL_DATA[@]: -${TAIL_LINES}}"
  else
    __duct_msg w "empty result!"
  fi
}

# @func duct tee

# @deps duct-msg
# @intl false
# @life core
# @desc Bash `tee` alternative.
# @opts <file> [append: true|false]
__duct_tee() {
  local TEE_FILE="${1:-}"
  local TEE_APPEND="${2:-false}"

  local -a TEE_DATA

  if [[ -z "$TEE_FILE" ]]
  then
    __duct_msg e "no file! (${DUCT_SCRIPT_NAME}:${BASH_LINENO[1]})"
    return 1
  fi

  if [[ "$TEE_APPEND" != true ]]
  then
    : > "$TEE_FILE"
  fi

  readarray -t -n 0 TEE_DATA

  printf "%b\n" "${TEE_DATA[@]}"
  printf "%b\n" "${TEE_DATA[@]}" >> "$TEE_FILE" 2>&1
}
