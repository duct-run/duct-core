# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2022 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# duct-shell
# Shell commands as pure Bash alternative.

# basename

# deps: duct-msg
# intl: false
# life: core
# desc: Return filename portion of pathname, with optional suffix removal.
# opts: <pathname> [suffix]
__duct_basename() {
  local PATHNAME="$1"
  local SUFFIX="${2:-}"

  __duct_msg d "$PATHNAME $SUFFIX"

  PATHNAME="${PATHNAME##*/}"
  PATHNAME="${PATHNAME%"${SUFFIX}"}"

  printf "%b\n" "$PATHNAME"
}
readonly -f __duct_basename

# dirname

# deps: duct-msg
# intl: false
# life: core
# desc: Return directory portion of pathname.
# opts: <pathname>
__duct_dirname() {
  local PATHNAME="$1"

  __duct_msg d "$PATHNAME"

  printf "%b\n" "${PATHNAME%/*}"
}
readonly -f __duct_dirname

# date

# Default date and time `strftime` format.
declare -g DUCT_DATE_FORMAT=${DUCT_DATE_FORMAT:-"%F %T"}

# deps: duct-msg
# intl: false
# life: core
# desc: Print current date and time.
# opts: [format]
__duct_date() {
  local FORMAT="${1:-"$DUCT_DATE_FORMAT"}"

  __duct_msg d "format $FORMAT"

  printf "%($FORMAT)T\\n" "-1"
}
readonly -f __duct_date

# find

# deps: duct-msg
# intl: false
# life: core
# desc: Simple `find` in pure Bash.
# opts: <path> [type] [match|regex]
__duct_find() {
  local FIND_ROOT="${1:-"$PWD"}"
  local FIND_TYPE="${2:-""}"
  local FIND_MATCH="${3:-""}"

  shopt -s globstar
  shopt -s dotglob

  __duct_msg d "searching $FIND_ROOT type:${FIND_TYPE:-"all"} match:${FIND_MATCH:-"all"}"

  for FIND in "${FIND_ROOT}"/**/*
  do

    # type
    if [[ -n "${FIND_TYPE}" ]]
    then
      case "$FIND_TYPE"
      in
        d|dir|directory)
          if [[ ! -d "$FIND" ]]
          then
            continue
          fi
        ;;
        f|file)
          if [[ ! -f "$FIND" ]]
          then
            continue
          fi
        ;;
      esac
    fi

    # match
    if [[ -n "$FIND_MATCH" ]]
    then
      if [[ ! "$FIND" =~ $FIND_MATCH ]]
      then
        continue
      fi
    fi

    echo "$FIND"
  done

  shopt -u globstar
  shopt -u dotglob

  __duct_msg d "runtime: ${SECONDS}s"
}
readonly -f __duct_find

# urlencode

# Regex match to exclude from encoding.
declare -g DUCT_URLENCODE_EXCLUDE="${DUCT_URLENCODE_EXCLUDE:-"[A-Za-z0-9._-]"}"

# deps: duct-msg
# intl: false
# life: core
# desc: Percent-encode a string.
# opts: <string>
__duct_urlencode() {
  local STR="${1:-}"

  if [[ -z "$STR" ]]
  then
    __duct_msg e "no string!"
    return 1
  else
    __duct_msg d "$STR"
  fi

  for (( IDX=0; IDX<${#STR}; IDX++ ))
  do
    if [[ "${STR:$IDX:1}" =~ $DUCT_URLENCODE_EXCLUDE ]]
    then
      printf "%s" "${STR:$IDX:1}"
    else
      printf "%%%02X" "'${STR:$IDX:1}"
    fi
  done
  printf "\n"
}
readonly -f __duct_urlencode

# urldecode

# deps: duct-msg
# intl: false
# life: core
# desc: Decode a percent-encoded string.
# opts: <string>
__duct_urldecode() {
  local STR="${1:-}"

  if [[ -z "$STR" ]]
  then
    __duct_msg e "no string!"
    return 1
  else
    __duct_msg d "$STR"
  fi

  STR="${STR//+/ }"
  printf '%b\n' "${STR//%/\\x}"
}
readonly -f __duct_urldecode

# umask

# Use umask
declare -g DUCT_UMASK="${DUCT_UMASK:-"$( umask )"}"

# Directory mode from umask (set at run-time).
declare -g -x DUCT_UMASK_DMODE=""

# File mode from umask (set at run-time).
declare -g -x DUCT_UMASK_FMODE=""

# deps: duct-msg
# intl: true
# life: core
# desc: Set a umask to work with.
# opts:
__duct_umask() {
  DUCT_UMASK_DMODE="$( printf '%#o' $(( 0777 & ~DUCT_UMASK )) )"
  __duct_msg d "dirmode $DUCT_UMASK_DMODE"

  DUCT_UMASK_FMODE="$( printf '%#o' $(( 0777 & ~0111 & ~DUCT_UMASK )) )"
  __duct_msg d "filemode $DUCT_UMASK_FMODE"
}
readonly -f __duct_umask

# realpath

# deps: duct-msg
# intl: false
# life: beta
# desc: Get real path of a file
# opts: <file>
__duct_realpath() {
  local FILE="${1:-}"

  if [[ -z "$FILE" ]]
  then
    echo duct msg e "no file!"
    exit 1
  fi

  if [[ ! -e "$FILE" ]]
  then
    echo duct msg e "$FILE not found!"
    exit 1
  fi

  if [[ ! -L "$FILE" ]]
  then
    __duct_msg d "$FILE is not a symlink"
  fi

  while [[ -L "$FILE" ]] && [[ "$(ls -l "$FILE" )" =~ -\>\ (.*) ]]
  do
    LINK="${BASH_REMATCH[1]}"
    DIRNAME="$( __duct_dirname "$FILE" )"

    if [[ ! "$LINK" =~ ^/ ]]
    then
      DIRNAME="${DIRNAME}/$( __duct_dirname "$LINK" )"
    else
      DIRNAME="$( __duct_dirname "$LINK" )"
    fi

    DIRNAME="$( __duct_dirname "$DIRNAME" )"
    DIRNAME="$( cd "$DIRNAME" && echo "$PWD" )"
    FILE="${DIRNAME}/${FILE##*/}"
  done

  echo "$FILE"
}
readonly -f __duct_realpath

# source

# deps: duct-msg
# intl: false
# life: testing
# desc: Source a variables file and export with optional prefix.
# opts: <source-file> [prefix]
__duct_source() {
  local SRC_FILE="$1"
  local SRC_PREFIX="${2:-""}"
  local -a SRC_CONTENT

  local SRC
  local VAR
  local VAL

  if [[ -z "$SRC_FILE" ]]
  then
    __duct_msg e "no source file!"
    return 1
  fi

  if [[ -s "$SRC_FILE" ]]
  then
    # shellcheck disable=SC1090
    readarray -t SRC_CONTENT < <( ( set -x; source "$SRC_FILE"; set +x ) 2>&1 )

    for SRC in "${SRC_CONTENT[@]}"
    do
      if [[ "$SRC" =~ ([A-Z_]+)=([[:alnum:][:punct:][:blank:]]+) ]]
      then
        VAR="${BASH_REMATCH[1]:?}"
        VAL="${BASH_REMATCH[2]:?}"

        VAL="${VAL//"'"}"   # remove '

        if [[ -n "$SRC_PREFIX" ]]
        then
          __duct_msg d "export ${SRC_PREFIX}_${VAR}=${VAL}"
          export "${SRC_PREFIX}_${VAR}=${VAL}"
        else
          __duct_msg d "export ${VAR}=${VAL}"
          export "${VAR}=${VAL}"
        fi
      fi
    done

  else
    __duct_msg w "$SRC_FILE is empty!"
  fi
}
readonly -f __duct_source

# cat

# deps: duct-msg
# intl: false
# life: core
# desc: Bash `cat` alternative.
# opts: <file(s)>
__duct_cat() {
  local CAT_FILES=( "$@" )

  local -a CAT_DATA
  local CAT_FILE

  if [[ -z "${CAT_FILES[*]+x}" ]]
  then
    __duct_msg d "reading from stdin"
    readarray -t -n 0 CAT_DATA
    printf "%s\n" "${CAT_DATA[@]}"
  else
    for CAT_FILE in "${CAT_FILES[@]}"
    do
      if [[ -s "$CAT_FILE" ]]
      then
        __duct_msg d "reading from file $CAT_FILE"
        mapfile -t -n 0 CAT_DATA < "$CAT_FILE"
        printf "%s\n" "${CAT_DATA[@]}"
      fi
    done
  fi
}
readonly -f __duct_cat

# head

# deps: duct-msg
# intl: false
# life: core
# desc: Bash `head` alternative.
# opts: <lines> <file>
__duct_head() {
  local HEAD_LINES="${1:-0}"
  local HEAD_FILE="${2:-}"

  local -a HEAD_DATA

  if [[ -z "$HEAD_FILE" ]]
  then
    __duct_msg d "reading $HEAD_LINES from stdin"
    readarray -t -n "$HEAD_LINES" HEAD_DATA
  elif [[ -s "$HEAD_FILE" ]]
  then
    __duct_msg d "reading $HEAD_LINES from file $HEAD_FILE"
    mapfile -t -n "$HEAD_LINES" HEAD_DATA < "$HEAD_FILE"
  fi

  if [[ -n "${HEAD_DATA[*]+x}" ]]
  then
    printf "%s\n" "${HEAD_DATA[@]}"
  else
    __duct_msg w "emtpy result!"
  fi
}
readonly -f __duct_head

# tail

# deps: duct-msg
# intl: false
# life: core
# desc: Bash `tail` alternative.
# opts: <lines> <file>
__duct_tail() {
  local TAIL_LINES="${1:-0}"
  local TAIL_FILE="${2:-}"

  local -a TAIL_DATA

  if [[ -z "$TAIL_FILE" ]]
  then
    __duct_msg d "reading $TAIL_LINES from stdin"
    readarray -t -n 0 TAIL_DATA
  elif [[ -s "$TAIL_FILE" ]]
  then
    __duct_msg d "reading $TAIL_LINES from file $TAIL_FILE"
    mapfile -t -n 0 TAIL_DATA < "$TAIL_FILE"
  fi

  if [[ -n "${TAIL_DATA[*]+x}" ]]
  then
    printf "%s\n" "${TAIL_DATA[@]: -${TAIL_LINES}}"
  else
    __duct_msg w "empty result!"
  fi
}
readonly -f __duct_tail

# tee

# deps: duct-msg
# intl: false
# life: core
# desc: Bash `tee` alternative.
# opts: <file> [append: true|false]
__duct_tee() {
  local TEE_FILE="${1:-}"
  local TEE_APPEND="${2:-false}"
  local TEE_LINE

  if [[ -z "$TEE_FILE" ]]
  then
    __duct_msg e "no file!"
    return 1
  fi

  if [[ "$TEE_APPEND" != true ]]
  then
    : > "$TEE_FILE"
  fi

  while read -r TEE_LINE
  do
    printf "%s\n" "$TEE_LINE"
    printf "%s\n" "$TEE_LINE" >> "$TEE_FILE" 2>&1
  done
}
readonly -f __duct_tee
