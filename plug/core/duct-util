# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2022-2023 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# @plug duct-util
# @desc Collection of core utilities.

# @func duct util load

# @fvar List of duct-util requirements.
declare -r -a _DUCT_UTIL_LOAD_REQUIREMENTS=(
  base64
)

# @desc Check duct-util requirements.
# @intl true
# @life core
# @deps
# @opts
__duct_util_load() {
  __duct_intl

  local UTIL_LOAD_RC=0

  __duct_bin_check "${_DUCT_UTIL_LOAD_REQUIREMENTS[@]}" || UTIL_LOAD_RC=$?

  return $UTIL_LOAD_RC
}

# @func duct lower

# @desc Return string to lower.
# @intl false
# @life core
# @deps
# @opts <string>
__duct_lower() {
  local LOWER_STRING="$1"

  printf "%s\n" "${LOWER_STRING,,}"
}

# @func duct upper

# @desc Return string to upper.
# @intl false
# @life core
# @deps
# @opts <string>
__duct_upper() {
  local UPPER_STRING="$1"

  printf "%s\n" "${UPPER_STRING^^}"
}

# @func duct slug

# @desc Slugify a string.
# @intl false
# @life core
# @deps
# @opts <string>
__duct_slug() {
  local SLUG_STRING="$1"

  SLUG_STRING="${SLUG_STRING,,}"    # lower
  SLUG_STRING="${SLUG_STRING// /-}" # whitespace to '-'

  printf "%s\n" "$SLUG_STRING"
}

# @func duct trim

# @desc Remove leading and trailing whitespaces from string.
# @intl false
# @life core
# @deps
# @opts <string>
__duct_trim() {
  local TRIM_STRING="$1"

  TRIM_STRING="${TRIM_STRING##*([[:space:]])}"
  TRIM_STRING="${TRIM_STRING%%*([[:space:]])}"

  printf "%s\n" "$TRIM_STRING"
}

# @func duct strip

# @desc Strip elements from a string.
# @intl false
# @life core
# @deps
# @opts <string> <element>
__duct_strip() {
  local -a STRIP_ELEMENT
  local -a STRIP_STRING
  local STRIP_INDEX
  local STRIP_ITEM

  # to array
  IFS=" " read -r -a STRIP_STRING <<< "$1"
  IFS=" " read -r -a STRIP_ELEMENT <<< "$2"

  for STRIP_ITEM in "${STRIP_ELEMENT[@]}"
  do
    for STRIP_INDEX in "${!STRIP_STRING[@]}"
    do
      if [[ "${STRIP_STRING[STRIP_INDEX]}" == "$STRIP_ITEM" ]]
      then
        unset 'STRIP_STRING[STRIP_INDEX]'
      fi
    done
  done

  printf "%s\n" "${STRIP_STRING[*]}"
}

# @func duct debase64

# @desc Decode a base64 string to plain-text, or simply output the plain-text input value.
# @intl false
# @life core
# @deps duct-msg
# @opts <string>
__duct_debase64() {
  local DEBASE64_STRING="${1:-}"

  local DEBASE64_OUTPUT
  local DEBASE64_RC=0

  if [[ -z "$DEBASE64_STRING" ]]
  then
    __duct_msg e "empty string!"
    return 1
  fi

  set +e
  DEBASE64_OUTPUT="$( base64 -d <<< "$DEBASE64_STRING" 2>/dev/null )"
  DEBASE64_RC=$?
  set -e

  if [[ "$DEBASE64_RC" -gt 0 ]]
  then
    __duct_msg d "plain string"
    printf "%s\n" "$DEBASE64_STRING"
  else
    if [[ ! "$DEBASE64_OUTPUT" =~ [[:alpha:]] ]]
    then
      __duct_msg d "plain string"
      printf "%s\n" "$DEBASE64_STRING"
    else
      __duct_msg d "base64 string"
      printf "%s\n" "$DEBASE64_OUTPUT"
    fi
  fi
}

# @func duct sfile

# @fvar Enable/disable masking of content (WARNING!).
declare -g DUCT_SFILE_MASK=${DUCT_SFILE_MASK:-true}

# @fvar String used to mask the content.
declare -g DUCT_SFILE_MASK_STRING=${DUCT_SFILE_MASK_STRING:-"[SECRET]"}

# @fvar Enable/disable overwriting the file.
declare -g DUCT_SFILE_OVERWRITE=${DUCT_SFILE_OVERWRITE:-false}

# @fvar Filename to use.
declare -g DUCT_SFILE_FILENAME=${DUCT_SFILE_FILENAME:-}

# @fvar Default file mode.
declare -g DUCT_SFILE_FILEMODE=${DUCT_SFILE_FILEMODE:-0600}

# @fvar File content.
declare -g DUCT_SFILE_CONTENT=${DUCT_SFILE_CONTENT:-}

# @desc Write a file masking the content from messages.
# @intl false
# @life core
# @deps duct-msg duct-run
# @opts [filename] [content]
__duct_sfile() {
  local FILE="${1:-"${DUCT_SFILE_FILENAME}"}"
  local CONT="${2:-"${DUCT_SFILE_CONTENT}"}"
  local MASK="$CONT"
  local ROOT

  if [[ -z "$FILE" ]]
  then
    __duct_msg e "no filename!"
    return 1
  fi

  ROOT="$( __duct_dirname "$FILE" )"

  if [[ -s "$FILE" ]]
  then
    if [[ "$DUCT_SFILE_OVERWRITE" == true ]]
    then
      __duct_msg w "$FILE exists, overwriting!"
    else
      __duct_msg w "$FILE exists, not changing!"
      return 0
    fi
  fi

  if [[ "$DUCT_SFILE_MASK" == true ]]
  then
    MASK="$DUCT_SFILE_MASK_STRING"
  else
    MASK="$CONT"
  fi

  if [[ "$DUCT_RUN_SIMULATE" == true ]]
  then
    __duct_msg x "[SIMULATE] creating $FILE with content: $MASK"
  else
    if [[ ! -d "$ROOT" ]]
    then
      __duct_msg d "creating root $ROOT"
      mkdir -p "$ROOT" || return
    fi

    __duct_msg n "creating $FILE with content: $MASK"
    :> "$FILE"
    printf "%s\n" "$CONT" > "$FILE"
    __duct_run chmod "$DUCT_SFILE_FILEMODE" "$FILE"
  fi
}

# @func duct cleanup

# @fvar List of directories and files to cleanup (defaults).
declare -a -r _DUCT_CLEANUP_LIST=()

# shellcheck disable=SC2206
# @fvar List of directories and files to cleanup.
declare -g -a DUCT_CLEANUP_LIST=( ${DUCT_CLEANUP_LIST[@]:-${_DUCT_CLEANUP_LIST[@]}} )

# @desc Cleanup and remove a list of directories and files.
# @intl false
# @life
# @deps duct-msg duct-run
# @opts [cleanup-list[@]]
__duct_cleanup() {
  # shellcheck disable=SC2206
  local CLEANUP_LIST=( ${@:-${DUCT_CLEANUP_LIST[@]}}  )

  local CLEANUP_ITEM

  if [[ ${#CLEANUP_LIST[@]} -eq 0 ]]
  then
    __duct_msg w "empty cleanup list!"
    return 0
  fi

  for CLEANUP_ITEM in "${CLEANUP_LIST[@]}"
  do
    if [[ -d "$CLEANUP_ITEM" ]]
    then
      __duct_msg n "removing dir $CLEANUP_ITEM"
      __duct_run rm -fr "$CLEANUP_ITEM"

    elif [[ -L "$CLEANUP_ITEM" ]]
    then
      __duct_msg n "removing link $CLEANUP_ITEM"
      __duct_run rm -f "$CLEANUP_ITEM"

    elif [[ -f "$CLEANUP_ITEM" ]]
    then
      __duct_msg n "removing file $CLEANUP_ITEM"
      __duct_run rm -f "$CLEANUP_ITEM"
    else
      __duct_msg w "$CLEANUP_ITEM not found!"
    fi
  done
}

# @func duct random

# @fvar Random character list (defaults).
declare -r -a _DUCT_RANDOM_CHARS=(
  "ABCDEFGHJKLMNPQRSTUVWX"
  "abcdefghijkmnpqrstuvwx"
  "123456789"
  "!$%,."
)

# @fvar Random character list.
declare -g -a DUCT_RANDOM_CHARS=( "${DUCT_RANDOM_CHARS[@]:-${_DUCT_RANDOM_CHARS[@]}}" )

# @fvar Random string length.
declare -g -i DUCT_RANDOM_LENGTH=${DUCT_RANDOM_LENGTH:-16}

# @desc Create a random string from given character list.
# @intl false
# @life core
# @deps duct-msg
# @opts [length]
__duct_random() {
  local -i RANDOM_LENGTH="${1:-${DUCT_RANDOM_LENGTH}}"

  local -a RANDOM_LIST=()
  local RANDOM_STRING
  local RANDOM_CHARS
  local RANDOM_ITEM

  RANDOM_CHARS="${DUCT_RANDOM_CHARS[*]}"
  RANDOM_CHARS="${RANDOM_CHARS// }"

  for (( RANDOM_ITEM=0; RANDOM_ITEM<${#RANDOM_CHARS}; RANDOM_ITEM++ ))
  do
    RANDOM_LIST+=( "${RANDOM_CHARS:$RANDOM_ITEM:1}" )
  done

  __duct_msg d "$RANDOM_LENGTH chars out of '$RANDOM_CHARS'"

  for (( RANDOM_ITEM=0; RANDOM_ITEM<RANDOM_LENGTH; RANDOM_ITEM++ ))
  do
    if [[ "$DUCT_BASH_SRANDOM" == true ]]
    then
      RANDOM_STRING+="${RANDOM_LIST[$(( SRANDOM % ${#RANDOM_LIST[@]} ))]}"
    else
      RANDOM_STRING+="${RANDOM_LIST[$(( RANDOM % ${#RANDOM_LIST[@]} ))]}"
    fi
  done

  printf "%s\n" "$RANDOM_STRING"
}

# @func duct tmpgen

# @fvar Prefix of tmp.
declare -g DUCT_TMPGEN_PREFIX="${DUCT_TMPGEN_PREFIX:-"duct-"}"

# @fvar Tmp directory.
declare -g DUCT_TMPGEN_PATH="${DUCT_TMPGEN_PATH:-${TMPDIR:-"/tmp"}}"

# @fvar Length of random part.
declare -g DUCT_TMPGEN_LENGTH="${DUCT_TMPGEN_LENGTH:-9}"

# @desc Generate a temporary path, without creating it.
# @intl false
# @life core
# @deps
# @opts [prefix] [path]
__duct_tmpgen() {
  local TMPGEN_PREFIX="${1:-"$DUCT_TMPGEN_PREFIX"}"
  local TMPGEN_PATH="${2:-"$DUCT_TMPGEN_PATH"}"

  local TMPGEN_OUTPUT

  TMPGEN_OUTPUT="${TMPGEN_PATH}/${TMPGEN_PREFIX}$(
    export DUCT_RANDOM_CHARS=(
      "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      "abcdefghijklmnopqrstuvwxyz"
      "0123456789"
    )
    __duct_random "$DUCT_TMPGEN_LENGTH"
  )"

  printf "%s\n" "$TMPGEN_OUTPUT"
}

# @func duct mktmpdir

# @fvar Prefix.
declare -g DUCT_MKTMPDIR_PREFIX="${DUCT_MKTMPDIR_PREFIX:-"duct-"}"

# @fvar Tmp path.
declare -g DUCT_MKTMPDIR_PATH="${DUCT_MKTMPDIR_PATH:-${TMPDIR:-"/tmp"}}"

# @fvar Mode of directory.
declare -g DUCT_MKTMPDIR_MODE="${DUCT_MKTMPDIR_MODE:-0700}"

# @desc Create a temporary directory using `duct tmpgen`.
# @intl false
# @life core
# @deps duct-msg duct-run
# @opts [prefix] [path]
__duct_mktmpdir() {
  local MKTMPDIR_PREFIX="${1:-"$DUCT_MKTMPDIR_PREFIX"}"
  local MKTMPDIR_PATH="${2:-"$DUCT_MKTMPDIR_PATH"}"

  local MKTMPDIR_DIR
  local MKTMPDIR_RC=0

  MKTMPDIR_DIR="$( __duct_tmpgen "$MKTMPDIR_PREFIX" "$MKTMPDIR_PATH" )"
  __duct_run mkdir -m "$DUCT_MKTMPDIR_MODE" -p "$MKTMPDIR_DIR" || MKTMPDIR_RC=$?
  printf "%s\n" "$MKTMPDIR_DIR"
  return $MKTMPDIR_RC
}

# @func duct mktmpfile

# @fvar Prefix
declare -g DUCT_MKTMPFILE_PREFIX="${DUCT_MKTMPDIR_PREFIX:-"duct-"}"

# @fvar Tmp path.
declare -g DUCT_MKTMPFILE_PATH="${DUCT_MKTMPFILE_PATH:-${TMPDIR:-"/tmp"}}"

# @fvar Mode of file
declare -g DUCT_MKTMPFILE_MODE="${DUCT_MKTMPFILE_MODE:-0600}"

# @desc Create a temporay file using `duct tmpgen`.
# @intl false
# @life core
# @deps duct-msg duct-run
# @opts [prefix] [path]
__duct_mktmpfile() {
  local MKTMPFILE_PREFIX="${1:-"$DUCT_MKTMPFILE_PREFIX"}"
  local MKTMPFILE_PATH="${2:-"$DUCT_MKTMPFILE_PATH"}"

  local MKTMPFILE_FILE
  local MKTMPFILE_RC=0

  MKTMPFILE_FILE="$( __duct_tmpgen "$MKTMPFILE_PREFIX" "$MKTMPFILE_PATH" )"
  (
    __duct_run touch "$MKTMPFILE_FILE" || MKTMPFILE_RC=$?
    __duct_run chmod "$DUCT_MKTMPFILE_MODE" "$MKTMPFILE_FILE"
  ) || MKTMPFILE_RC=$?
  printf "%s\n" "$MKTMPFILE_FILE"
  return $MKTMPFILE_RC
}

# @func duct find count

# @desc Find files and directories returning count.
# @intl false
# @life core
# @deps duct-msg
# @opts <path> <@file-directory>
__duct_find_count() {
  local COUNT_ROOT="${1:-$PWD}"
  shift
  local -a COUNT_MATCH=( "$@" )

  local MATCH
  local COUNT=0

  for MATCH in "${COUNT_MATCH[@]}"
  do
    _PATH="${COUNT_ROOT}/${MATCH}"
    if [[ -e "$_PATH" ]]
    then
      if [[ -f "$_PATH" ]]
      then
        __duct_msg d "file found $_PATH"
        (( COUNT+=1 ))
      elif [[ -d "$_PATH" ]]
      then
        __duct_msg d "directory found $_PATH"
        (( COUNT+=1 ))
      fi
    fi
    unset _PATH
  done
  echo "$COUNT"
}

# @func duct textract

# @fvar Filename to extract text from.
declare -g DUCT_TEXTRACT_FILENAME=""

# @fvar Marker begin.
declare -g DUCT_TEXTRACT_MARKER_BEGIN=""

# @fvar Marker end.
declare -g DUCT_TEXTRACT_MARKER_END=""

# @desc Extract text between two markers.
# @intl false
# @life core
# @deps duct-msg
# @opts [filename] [marker-begin] [marker-end]
__duct_textract() {
  local TEXT_FILE="${1:-"$DUCT_TEXTRACT_FILENAME"}"
  local TEXT_BEGIN="${2:-"$DUCT_TEXTRACT_MARKER_BEGIN"}"
  local TEXT_END="${3:-"$DUCT_TEXTRACT_MARKER_END"}"
  local -a TEXT_CONTENT
  local TEXT_LINE
  local TEXT_PRINT=0
  local TEXT_ERROR=0

  if [[ -z "$TEXT_FILE" ]]
  then
    __duct_msg e "no file!"
    (( TEXT_ERROR+=1 ))
  fi

  if [[ -z "$TEXT_BEGIN" ]]
  then
    __duct_msg e "no marker begin!"
    (( TEXT_ERROR+=1 ))
  fi

  if [[ -z "$TEXT_END" ]]
  then
    __duct_msg e "no marker end!"
    (( TEXT_ERROR+=1 ))
  fi

  if [[ $TEXT_ERROR -gt 0 ]]
  then
    return 1
  fi

  if [[ ! -f "$TEXT_FILE" ]]
  then
    __duct_msg d "using variable input"
    readarray -t TEXT_CONTENT <<< "$TEXT_FILE"
  else
    __duct_msg d "using file $TEXT_FILE"
    readarray -t TEXT_CONTENT < "$TEXT_FILE"
  fi

  for TEXT_LINE in "${TEXT_CONTENT[@]}"
  do
    if [[ "$TEXT_PRINT" -eq 1 ]] && [[ "$TEXT_LINE" != "$TEXT_END" ]]
    then
      echo "$TEXT_LINE"
    fi

    if [[ $TEXT_LINE == "$TEXT_BEGIN" ]]
    then
      __duct_msg d "found $TEXT_BEGIN"
      TEXT_PRINT=1
    fi

    if [[ $TEXT_LINE == "$TEXT_END" ]]
    then
      __duct_msg d "found $TEXT_END"
      TEXT_PRINT=0
    fi
  done
}

# @func duct textinject

# @fvar Filename to extract text from.
declare -g DUCT_TEXTINJECT_FILENAME=""

# @fvar Marker begin.
declare -g DUCT_TEXTINJECT_MARKER_BEGIN=""

# @fvar Marker end.
declare -g DUCT_TEXTINJECT_MARKER_END=""

# @fvar Text to inject.
declare -g DUCT_TEXTINJECT_TEXT=""

# @desc Extract text between two markers.
# @intl false
# @life core
# @deps duct-msg
# @opts [filename] [marker-begin] [marker-end]
__duct_textinject() {
  local TEXT_FILE="${1:-"$DUCT_TEXTINJECT_FILENAME"}"
  local TEXT_BEGIN="${2:-"$DUCT_TEXTINJECT_MARKER_BEGIN"}"
  local TEXT_END="${3:-"$DUCT_TEXTINJECT_MARKER_END"}"
  local TEXT_INJECT="${4:-"$DUCT_TEXTINJECT_TEXT"}"

  local -a TEXT_ALL=()
  local -a TEXT_CONTENT
  local -a TEXT_POST=()
  local -a TEXT_PRE=()
  local TEXT_BEGIN_LINE=0
  local TEXT_END_LINE=0
  local TEXT_ERROR=0
  local TEXT_LINE

  if [[ -z "$TEXT_FILE" ]]
  then
    __duct_msg e "no file!"
    (( TEXT_ERROR+=1 ))
  fi

  if [[ ! -e "$TEXT_FILE" ]]
  then
    __duct_msg e "$TEXT_FILE not found!"
    (( TEXT_ERROR+=1 ))
  fi

  if [[ -z "$TEXT_BEGIN" ]]
  then
    __duct_msg e "no marker begin!"
    (( TEXT_ERROR+=1 ))
  fi

  if [[ -z "$TEXT_END" ]]
  then
    __duct_msg e "no marker end!"
    (( TEXT_ERROR+=1 ))
  fi

  if [[ -z "$TEXT_INJECT" ]]
  then
    __duct_msg e "no text!"
    (( TEXT_ERROR+=1 ))
  fi

  if [[ $TEXT_ERROR -gt 0 ]]
  then
    return 1
  fi

  __duct_msg d "using $TEXT_FILE"
  mapfile -t -n 0 TEXT_CONTENT < "$TEXT_FILE"

  for TEXT_LINE in "${!TEXT_CONTENT[@]}"
  do
    if [[ "${TEXT_CONTENT[$TEXT_LINE]}" == "$TEXT_BEGIN" ]]
    then
      __duct_msg d "found $TEXT_BEGIN (${TEXT_FILE}:$(( TEXT_LINE + 1)))"
      TEXT_BEGIN_LINE=$TEXT_LINE
    fi

    if [[ "${TEXT_CONTENT[$TEXT_LINE]}" == "$TEXT_END" ]]
    then
      __duct_msg d "found $TEXT_END (${TEXT_FILE}:$(( TEXT_LINE + 1)))"
      TEXT_END_LINE=$TEXT_LINE
    fi
  done

  __duct_msg d "injecting text: $TEXT_INJECT"
  TEXT_PRE=( "${TEXT_CONTENT[@]:0:$(( TEXT_BEGIN_LINE + 1 ))}" )
  TEXT_POST=( "${TEXT_CONTENT[@]:$TEXT_END_LINE}" )
  TEXT_ALL=(
    "${TEXT_PRE[@]}"
    "$TEXT_INJECT"
    ""
    "${TEXT_POST[@]}"
  )

  __duct_msg d "writing file: $TEXT_FILE"
  printf "%s\n" "${TEXT_ALL[@]}" > "$TEXT_FILE"
}

# @func duct compare version

# @fvar Strip version 'v' prefix.
declare -g DUCT_COMPARE_VERSION_STRIP="${DUCT_COMPARE_VERSION_STRIP:-true}"

# @desc Compare two semantic versions, return newer or equal.
# @intl false
# @life core
# @deps duct-msg
# @opts <version1> <version2>
__duct_compare_version() {
  local -a COMPARE_VERSION_INPUT=( "$@" )

  local -a COMPARE_VERSION_0
  local -a COMPARE_VERSION_1
  local COMPARE_VERSION_0_PREFIX=""
  local COMPARE_VERSION_1_PREFIX=""

  local ITEM
  local IFS="."

  for ITEM in "${!COMPARE_VERSION_INPUT[@]}"
  do
    if [[ "${COMPARE_VERSION_INPUT[ITEM]}" =~ ^v && "$DUCT_COMPARE_VERSION_STRIP" != true ]]
    then
      declare "COMPARE_VERSION_${ITEM}_PREFIX"="v"
    fi
    COMPARE_VERSION_INPUT[ITEM]="${COMPARE_VERSION_INPUT[ITEM]#v}"

    read -r -a "COMPARE_VERSION_${ITEM}" <<< "${COMPARE_VERSION_INPUT[ITEM]}"
  done

  for (( ITEM=${#COMPARE_VERSION_0[@]}; ITEM<${#COMPARE_VERSION_1[@]}; ITEM++ ))
  do
    COMPARE_VERSION_0[ITEM]=0
  done

  for (( ITEM=0; ITEM<${#COMPARE_VERSION_0[@]}; ITEM++ ))
  do
    if [[ -z ${COMPARE_VERSION_1[ITEM]} ]]
    then
      COMPARE_VERSION_1[ITEM]=0
    fi

    if (( 10#${COMPARE_VERSION_0[ITEM]} > 10#${COMPARE_VERSION_1[ITEM]} ))
    then
      __duct_msg d "${COMPARE_VERSION_0_PREFIX}${COMPARE_VERSION_0[*]} > ${COMPARE_VERSION_1_PREFIX}${COMPARE_VERSION_1[*]}"
      printf "%s\n" "${COMPARE_VERSION_0_PREFIX}${COMPARE_VERSION_0[*]}"
      return

    elif (( 10#${COMPARE_VERSION_0[ITEM]} < 10#${COMPARE_VERSION_1[ITEM]} ))
    then
      __duct_msg d "${COMPARE_VERSION_0_PREFIX}${COMPARE_VERSION_0[*]} < ${COMPARE_VERSION_1_PREFIX}${COMPARE_VERSION_1[*]}"
      printf "%s\n" "${COMPARE_VERSION_1_PREFIX}${COMPARE_VERSION_1[*]}"
      return
    fi
  done

  __duct_msg d "${COMPARE_VERSION_0_PREFIX}${COMPARE_VERSION_0[*]} = ${COMPARE_VERSION_1_PREFIX}${COMPARE_VERSION_1[*]}"
  printf "%s\n" "${COMPARE_VERSION_0_PREFIX}${COMPARE_VERSION_0[*]}"
  return
}

# @func duct urlinfo

# @fvar Associative array of URL parts.
declare -g -x -A DUCT_URLINFO=()

# @desc Explode a URL into parts and set `DUCT_URLINFO` (`scheme`, `host`, and `path` is supported).
# @intl false
# @life beta
# @deps duct-msg
# @opts <url>
__duct_urlinfo() {
  local URL="${1:-""}"

  if [[ -z "$URL" ]]
  then
    __duct_msg e "no url!"
    return 1
  fi

  URL_SCHEME="${URL%%//*}"
  URL_SCHEME="${URL_SCHEME//:}"

  URL_AUTHPATH="${URL#*//}"

  URL_HOST="${URL_AUTHPATH%%/*}"
  URL_PATH="${URL_AUTHPATH#*/}"

  if [[ "$URL_PATH" == "$URL_HOST" ]]
  then
    URL_PATH="/"
  fi

  __duct_msg d "set scheme: '$URL_SCHEME'"
  DUCT_URLINFO["scheme"]="$URL_SCHEME"

  __duct_msg d "set host: '$URL_HOST'"
  DUCT_URLINFO["host"]="$URL_HOST"

  __duct_msg d "set path: '$URL_PATH'"
  DUCT_URLINFO["path"]="$URL_PATH"
}

# @func duct urlsplit

# @fvar Array of URL splits.
declare -g -x -a DUCT_URLSPLIT=()

# @desc Split a URL into parts and set `DUCT_URLSPLIT`.
# @intl false
# @life core
# @deps duct-msg
# @opts <url>
__duct_urlsplit() {
  local URL="${1:-}"

  if [[ -z "$URL" ]]
  then
    __duct_msg e "no url!"
    return 1
  fi

  IFS=" " read -r -a DUCT_URLSPLIT <<< "${URL//\// }"
}

# @func duct unpack

# @desc Unpack files from an archive.
# @intl false
# @life devel
# @deps duct-gnu duct-msg duct-run
# @opts
__duct_unpack() {
  local ARCHIVE="$1"
  shift
  local DIR="$1"
  shift
  local MODE="$1"
  shift
  local -a FILES=( "$@" )
  local FILE
  local SRC_FILE
  local DST_FILE

  for FILE in "${FILES[@]}"
  do
    SRC_FILE="${FILE%%:*}"
    DST_FILE="${FILE##*:}"

    local STRIP_PATH=0
    local -a EXTRA_OPTS=()
    local TYPE

    __duct_msg n "unpacking $SRC_FILE from $ARCHIVE to ${DIR}/${DST_FILE}"

    case "$ARCHIVE" in
      *.tar.gz|*.tar.xz|*.tgz|*.txz)
        # get / count
        STRIP_PATH="${FILE//[^\/]}"
        STRIP_PATH="${#STRIP_PATH}"

        if [[ $STRIP_PATH -ge 1 ]]
        then
          EXTRA_OPTS+=( --strip-components="$STRIP_PATH" --wildcards )
        fi
        __duct_gnu_tar -xf "$ARCHIVE" -C "$DIR" "${EXTRA_OPTS[@]}" "$SRC_FILE"
      ;;

      *.zip)
        __duct_run unzip -oqq "$ARCHIVE" "$SRC_FILE" -d "$DIR" "${EXTRA_OPTS[@]}"
      ;;

      *)
        TYPE="$( file -b --mime-type "$ARCHIVE" )"

        if [[ "$TYPE" =~ (executable|binary) ]]
        then
          __duct_run install -m "$MODE" "$ARCHIVE" "${DIR}/${DST_FILE}"
        else
          __duct_msg e "unsuported archive type $ARCHIVE"
          return 1
        fi
      ;;
    esac

    if [[ "$STRIP_PATH" -ge 1 ]]
    then
      SRC_FILE="${SRC_FILE##*/}"
    fi

    if [[ "$SRC_FILE" != "$DST_FILE" ]]
    then
      # shellcheck disable=SC2086
      __duct_run mv ${DIR}/${SRC_FILE} "${DIR}/${DST_FILE}"
    fi

    __duct_run chmod "$MODE" "${DIR}/${DST_FILE}"
  done

  __duct_run rm -f "${ARCHIVE:?}"
}

# @func duct sleep

# @fvar File descriptor for sleep (set at run-time).
declare -g DUCT_SLEEP_FD="${DUCT_SLEEP_FD:-}"

# @desc Sleep seconds (default 5).
# @intl false
# @life core
# @deps duct-msg
# @opts [sleep-seconds]
__duct_sleep() {
  local SLEEP="${1:-5}"

  __duct_msg d "sleep $SLEEP second(s)"

  if [[ "$DUCT_OSTYPE" =~ (darwin) ]]
  then
    read -r -t "$SLEEP" || :
  else
    if [[ -z "$DUCT_SLEEP_FD" ]]
    then
      exec {DUCT_SLEEP_FD}<> <(:)
    fi
    read -r -t "$SLEEP" -u "$DUCT_SLEEP_FD" || :
  fi
}

# @func duct sleep random

# @desc Sleep random seconds (default max 5, min 1 second).
# @intl false
# @life core
# @deps duct-msg
# @opts [sleep-max] [sleep-min]
__duct_sleep_random() {
  local SLEEP_RANDOM_MAX="${1:-5}"
  local SLEEP_RANDOM_MIN="${2:-1}"

  local SLEEP_RANDOM=0

  while [[ "$SLEEP_RANDOM" -lt "$SLEEP_RANDOM_MIN" ]]
  do
    if [[ "$DUCT_BASH_SRANDOM" == true ]]
    then
      SLEEP_RANDOM="$(( SRANDOM % SLEEP_RANDOM_MAX + 1 ))"
    else
      SLEEP_RANDOM="$(( RANDOM % SLEEP_RANDOM_MAX + 1 ))"
    fi
  done

  __duct_msg d "sleep $SLEEP_RANDOM of $SLEEP_RANDOM_MIN/$SLEEP_RANDOM_MAX second(s)"
  __duct_sleep "$SLEEP_RANDOM"
}

# @func duct sgrep

# @fvar List of files to use (defaults).
declare -r -a _DUCT_SGREP_FILES=()

# @fvar Bash regex compatible match.
declare -g DUCT_SGREP_MATCH="${DUCT_SGREP_MATCH:-}"

# shellcheck disable=SC2206
# @fvar List of files to use (if empty stdin is used).
declare -g -a DUCT_SGREP_FILES=( ${DUCT_SGREP_FILES[@]:-${_DUCT_SGREP_FILES[@]}} )

# @fvar Return value 'match' or 'line' number.
declare -g DUCT_SGREP_RETURN="${DUCT_SGREP_RETURN:-"match"}"

# @desc Simple grep in pure Bash.
# @intl false
# @life core
# @deps duct-msg
# @opts <match> [file(s)]
__duct_sgrep() {
  local SGREP_MATCH="${1:-$DUCT_SGREP_MATCH}"
  shift || :
  # shellcheck disable=SC2206
  local -a SGREP_FILES=( ${@:-${DUCT_SGREP_FILES[@]}} )

  if [[ -z "$SGREP_MATCH" ]]
  then
    __duct_msg e "no match specified!"
    return 1
  fi

  local -a SGREP_DATA
  local -a SGREP_FOUND=()
  local SGREP_FILE
  local SGREP_LINE

  ___duct_sgrep() {
    for SGREP_LINE in "${!SGREP_DATA[@]}"
    do
      if [[ "${SGREP_DATA[$SGREP_LINE]}" =~ $SGREP_MATCH ]]
      then
        if [[ "$DUCT_SGREP_RETURN" == "match" ]]
        then
          SGREP_FOUND+=( "${SGREP_DATA[$SGREP_LINE]}" )

        elif [[ "$DUCT_SGREP_RETURN" == "line" ]]
        then
          SGREP_FOUND+=( "$(( SGREP_LINE + 1 ))" )
        fi
      fi
    done
  }

  if [[ "${#SGREP_FILES[@]}" -lt 1 ]]
  then
    readarray -t -n 0 SGREP_DATA
    ___duct_sgrep
  else
    for SGREP_FILE in "${SGREP_FILES[@]}"
    do
      mapfile -t -n 0 SGREP_DATA < "$SGREP_FILE"
      ___duct_sgrep
    done
  fi

  if [[ "${#SGREP_FOUND[@]}" -ge 1 ]]
  then
    printf "%b\n" "${SGREP_FOUND[@]}"
  fi
}

# @func duct sort

# @desc Bubble sort in pure Bash.
# @intl false
# @life core
# @deps
# @opts
__duct_sort() {
  local -a SORT_INPUT
  local SORT_DONE=1
  local SORT_I
  local SORT_J
  local SORT_TEMP

  IFS=" " read -r -a SORT_INPUT <<< "$@"

  for (( SORT_I = 0; SORT_I < ( ${#SORT_INPUT[@]} - 1 ); SORT_I++ ))
  do
    SORT_DONE=0

    for ((SORT_J = 0; SORT_J < ( ${#SORT_INPUT[@]} - 1 - SORT_I ); SORT_J++ ))
    do
      if [ "${SORT_INPUT[SORT_J]}" \> "${SORT_INPUT[SORT_J+1]}" ]
      then
        SORT_TEMP="${SORT_INPUT[SORT_J]}"
        SORT_INPUT[SORT_J]="${SORT_INPUT[SORT_J+1]}"
        SORT_INPUT[SORT_J+1]="$SORT_TEMP"
        SORT_DONE=1
      fi
    done

    if [[ "$SORT_DONE" -eq 0 ]]
    then
      break
    fi
  done

  printf "%b\n" "${SORT_INPUT[@]}"
}

# @func duct compversion

# @desc Alias of `duct compare version`.
# @intl false
# @life deprecated
# @deps duct-msg
# @opts <version1> <version2>
__duct_compversion() {
  __duct_msg w "use 'duct compare version' instead!"
  __duct_compare_version "$@"
}

# @func duct grep

# @desc Alias of `duct gnu grep`.
# @intl false
# @life deprecated
# @deps duct-msg duct-gnu
# @opts <grep-options>
__duct_grep() {
  __duct_msg w "use 'duct gnu grep' instead!"
  __duct_gnu_grep "$@"
}

# @func duct sed

# @desc Alias of `duct gnu sed`.
# @intl false
# @life deprecated
# @deps duct-msg duct-gnu
# @opts <sed-options>
__duct_sed() {
  __duct_msg w "use 'duct gnu sed' instead!"
  __duct_gnu_sed "$@"
}
