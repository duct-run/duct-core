# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2022-2023 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# duct-array
# Collection of array functions.

# array load

declare -r -a _DUCT_ARRAY_LOAD_REQUIREMENTS=(
  sort
)

__duct_array_load() {
  local ARRAY_LOAD_RC=0

  __duct_intl

  __duct_bin_check "${_DUCT_ARRAY_LOAD_REQUIREMENTS[@]}" || ARRAY_LOAD_RC=$?

  return $ARRAY_LOAD_RC
}
readonly -f __duct_array_load

# array add

# deps:
# intl: false
# life: core
# desc: Add element to array if not present.
# opts: <element> <array@>
__duct_array_add() {
  local ELEMENT="${1:-}"
  shift || :
  local -a ARRAY=( "$@" )

  if [[ ! "${ARRAY[*]}" =~ $ELEMENT ]]
  then
    ARRAY+=( "$ELEMENT" )
  fi

  printf "%q\n" "${ARRAY[@]}"
}
readonly -f __duct_array_add

# array add2

# deps: duct-msg
# intl: false
# life: core
# desc: Add to an array if not present.
# opts: <array-name> <add>
__duct_array_add2() {
  local -n ARRAY_NAME="${1:-DUCT_NULL}"
  local ARRAY_ADD="${2:-}"

  if [[ "${!ARRAY_NAME}" == "DUCT_NULL" ]]
  then
    __duct_msg e "no array name! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 1
  fi

  if ! declare -p "${!ARRAY_NAME}" >/dev/null 2>&1
  then
    __duct_msg e "${!ARRAY_NAME} not found! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 1
  fi

  if [[ -z "$ARRAY_ADD" ]]
  then
    __duct_msg e "nothing to add! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 1
  fi

  # shellcheck disable=SC2076
  if [[ ! "${ARRAY_NAME[*]}" =~ "$ARRAY_ADD" ]]
  then
    readarray -t -n 0 -O "${#ARRAY_NAME[@]}" "${!ARRAY_NAME}" <<< "$ARRAY_ADD"
  fi
}
readonly -f __duct_array_add2

# array join

# deps:
# intl: false
# life: core
# desc: Join an array with given string.
# opts: <join-string> <array@>
__duct_array_join() {
  local IFS="${1:-}"
  shift || :
  local -a ARRAY=( "$@" )

  echo "${ARRAY[*]}"
}
readonly -f __duct_array_join

# array join2

# deps: duct-msg
# intl: false
# life: core
# desc: Join array values with given string.
# opts: <array-name> <join-string>
__duct_array_join2() {
  local -n ARRAY_NAME="${1:-DUCT_NULL}"
  local IFS="${2:-}"

  if [[ "${!ARRAY_NAME}" == "DUCT_NULL" ]]
  then
    __duct_msg e "no array name! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 1
  fi

  if ! declare -p "${!ARRAY_NAME}" >/dev/null 2>&1
  then
    __duct_msg e "${!ARRAY_NAME} not found! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 1
  fi

  if [[ "${#ARRAY_NAME[@]}" -eq 0 ]]
  then
    __duct_msg w "${!ARRAY_NAME} is empty! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 0
  fi

  if [[ -z "$IFS" ]]
  then
    __duct_msg e "no join string! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 1
  fi

  echo "${ARRAY_NAME[*]}"
  unset IFS
}
readonly -f __duct_array_join2

# array strip

# deps:
# intl: false
# life: core
# desc: Strip a regex match from an array.
# opts: <strip-regex> <array[@]>
__duct_array_strip() {
  local STRIP="${1:-}"
  shift || :
  local -a ARRAY=( "$@" )

  for _I in "${!ARRAY[@]}"
  do
    if [[ "${ARRAY[$_I]}" =~ $STRIP ]]
    then
      unset "ARRAY[$_I]"
    fi
  done

  printf "%q\n" "${ARRAY[@]}"
}
readonly -f __duct_array_strip

# array strip2

# deps: duct-msg
# intl: false
# life: core
# desc: Strip a regex match from an array.
# opts: <array-name> <strip-regex>
__duct_array_strip2() {
  local -n ARRAY_NAME="${1:-DUCT_NULL}"
  local ARRAY_STRIP="${2:-}"

  local ARRAY_KEY

  if [[ "${!ARRAY_NAME}" == "DUCT_NULL" ]]
  then
    __duct_msg e "no array name! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 1
  fi

  if ! declare -p "${!ARRAY_NAME}" >/dev/null 2>&1
  then
    __duct_msg e "${!ARRAY_NAME} not found! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 1
  fi

  if [[ "${#ARRAY_NAME[@]}" -eq 0 ]]
  then
    __duct_msg w "${!ARRAY_NAME} is empty! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 0
  fi

  if [[ -z "$ARRAY_STRIP" ]]
  then
    __duct_msg e "no strip regex! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 1
  fi

  for ARRAY_KEY in "${!ARRAY_NAME[@]}"
  do
    if [[ "${ARRAY_NAME[$ARRAY_KEY]}" =~ $ARRAY_STRIP ]]
    then
      unset "ARRAY_NAME[$ARRAY_KEY]"
    fi
  done
}
readonly -f __duct_array_strip2

# array sort

# deps:
# intl: false
# life: core
# desc: Sort an array (version sort).
# opts: <array[@]>
__duct_array_sort() {
  local -a ARRAY=( "$@" )

  local IFS=$'\n'

  readarray -t ARRAY < <( sort -V <<< "${ARRAY[*]}" )

  printf "%q\n" "${ARRAY[@]}"
}
readonly -f __duct_array_sort

# array sort2

# deps: duct-msg
# intl: false
# life: core
# desc: Sort an array (version sort).
# opts: <array-name>
__duct_array_sort2() {
  local -n ARRAY_NAME="${1:-DUCT_NULL}"

  local IFS=$'\n'

  if [[ "${!ARRAY_NAME}" == "DUCT_NULL" ]]
  then
    __duct_msg e "no array name! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 1
  fi

  if ! declare -p "${!ARRAY_NAME}" >/dev/null 2>&1
  then
    __duct_msg e "${!ARRAY_NAME} not found! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 1
  fi

  if [[ "${#ARRAY_NAME[@]}" -eq 0 ]]
  then
    __duct_msg w "${!ARRAY_NAME} is empty! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 0
  fi

  readarray -t -n 0 "${!ARRAY_NAME}" < <( sort -V <<< "${ARRAY_NAME[*]}" )
  unset IFS
}
readonly -f __duct_array_sort2

# array unique

# deps:
# intl: false
# life: core
# desc: Unique an array without sorting.
# opts: <array[@]>
__duct_array_unique() {
  local -a ARRAY=( "$@" )

  local -a UNIQUE=()

  for _E in "${ARRAY[@]}"
  do
    if [[ ! "${UNIQUE[*]}" =~ $_E ]]
    then
      UNIQUE+=( "$_E" )
    fi
  done

  printf "%q\n" "${UNIQUE[@]}"
}
readonly -f __duct_array_unique

# array unique2

# deps: duct-msg
# intl: false
# life: core
# desc: Remove duplicate values from an array without sorting.
# opts: <array-name>
__duct_array_unique2() {
  local -n ARRAY_NAME="${1:-DUCT_NULL}"

  local -a ARRAY_UNIQUE=()
  local ARRAY_ITEM

  if [[ "${!ARRAY_NAME}" == "DUCT_NULL" ]]
  then
    __duct_msg e "no array name! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 1
  fi

  if ! declare -p "${!ARRAY_NAME}" >/dev/null 2>&1
  then
    __duct_msg e "${!ARRAY_NAME} not found! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 1
  fi

  if [[ "${#ARRAY_NAME[@]}" -eq 0 ]]
  then
    __duct_msg w "${!ARRAY_NAME} is empty! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 0
  fi

  for ARRAY_ITEM in "${ARRAY_NAME[@]}"
  do
    if [[ ! "${ARRAY_UNIQUE[*]}" =~ $ARRAY_ITEM ]]
    then
      ARRAY_UNIQUE+=( "$ARRAY_ITEM" )
    fi
  done

  local IFS=$'\n'
  readarray -t -n 0 "${!ARRAY_NAME}" <<< "${ARRAY_UNIQUE[*]}"
  unset IFS
}
readonly -f __duct_array_unique2

# array keyval

# deps: duct-msg
# intl: false
# life: core
# desc: Print array key=value (mostly for debug).
# opts: <array-name>
__duct_array_keyval() {
  local -n ARRAY_NAME="${1:-DUCT_NULL}"

  local ARRAY_KEY

  if [[ "${!ARRAY_NAME}" == "DUCT_NULL" ]]
  then
    __duct_msg e "no array name! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 1
  fi

  if ! declare -p "${!ARRAY_NAME}" >/dev/null 2>&1
  then
    __duct_msg e "${!ARRAY_NAME} not found! ${DUCT_SCRIPT_FILE}:${BASH_LINENO[1]}"
    return 1
  fi

  __duct_msg d "${!ARRAY_NAME} ${#ARRAY_NAME[@]}"

  for ARRAY_KEY in "${!ARRAY_NAME[@]}"
  do
    printf "%b\n" "${ARRAY_KEY}=${ARRAY_NAME[$ARRAY_KEY]}"
  done
}
readonly -f __duct_array_keyval

# array json

# deps: duct-msg
# intl: false
# life: core
# desc: Generate a simple JSON from an formated array.
# opts: <array-name>
__duct_array_json() {
  local -n ARRAY_NAME="${1:-DUCT_NULL}"

  local ARRAY_KEY
  local JSON_KEY
  local JSON_VAL

  # begin json
  printf "%s\n" "{"

  for ARRAY_KEY in "${!ARRAY_NAME[@]}"
  do
    JSON_KEY="${ARRAY_NAME[$ARRAY_KEY]%%:*}"
    JSON_VAL="${ARRAY_NAME[$ARRAY_KEY]#*:}"

    # digit or bool
    if [[ "$JSON_VAL" =~ ^([[:digit:]]+|true|false|yes|no)$ ]]
    then
      printf '  "%s": %s' "$JSON_KEY" "$JSON_VAL"

    # list
    elif [[ "$JSON_VAL" =~ ^(\[(.*)\])$ ]]
    then
      printf '  "%s": [ ' "$JSON_KEY"

      IFS=", " read -r -a _JSON_VAL <<< "${BASH_REMATCH[2]}"

      _LIST_VAL=$( printf '"%s", ' "${_JSON_VAL[@]}" )

      printf '%s' "${_LIST_VAL::-2}"
      printf ' ]'

    # string
    else
      printf '  "%s": "%s"' "$JSON_KEY" "$JSON_VAL"
    fi

    # seperator
    if [[ "$ARRAY_KEY" -lt "${#ARRAY_NAME[@]}-1" ]]
    then
      printf ",\n"
    else
      printf "\n"
    fi
  done

  # end json
  printf "%s\n" "}"
}
readonly -f __duct_array_json
