# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2022 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# duct-init
# Inital checks and requirements.

# Enable/disable init debug messages.
declare -g DUCT_INIT_QUIET="${DUCT_INIT_QUIET:-false}"

# List of duct requirements (internal).
declare -g -r -a _DUCT_INIT_REQUIRED=(
  base64
  curl
  git
  jq
  sleep
  sort
  unzip
  xz
)

# duct init

# Minimal curl version.
declare -g -r _DUCT_INIT_CURL_VERSION="7.29.0"

# Minimal git version.
declare -g -r _DUCT_INIT_GIT_VERSION="2.25.0"

# Minimal jq version.
declare -g -r _DUCT_INIT_JQ_VERSION="1.6"

# deps: duct-gnu duct-util
# intl: true
# life: core
# desc: Check all duct requirements.
# opts:
__duct_init() {
  __duct_intl

  local INIT_RC=0
  local MSG_LEVEL="$DUCT_MSG_MAX_LEVEL"

  if [[ "$DUCT_INIT_QUIET" == true ]]
  then
    DUCT_MSG_MAX_LEVEL=0
  fi

  # os type
  __duct_ostype

  # host type
  __duct_hosttype

  # check requirements
  __duct_bin_check "${_DUCT_INIT_REQUIRED[@]}" || (( INIT_RC+=$? ))

  if [[ "$INIT_RC" -eq 0 ]]
  then
    # check curl version
    __duct_ver_check curl "$_DUCT_INIT_CURL_VERSION" 2 || (( INIT_RC+=$? ))

    # check git version
    __duct_ver_check git "$_DUCT_INIT_GIT_VERSION" 3 || (( INIT_RC+=$? ))

    # check jq version
    __duct_ver_check jq "$_DUCT_INIT_JQ_VERSION" 1 || (( INIT_RC+=$? ))
  fi

  # check gnu
  __duct_gnu_check || (( INIT_RC+=$? ))

  DUCT_MSG_MAX_LEVEL="$MSG_LEVEL"

  if [[ "$INIT_RC" -gt 0 ]]
  then
    __duct_msg e "requirements not met!"
    return 1
  else
    return 0
  fi
}
readonly -f __duct_init
