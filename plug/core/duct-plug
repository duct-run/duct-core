# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2022-2023 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# duct-plug
# Handle duct plugins.

# Quiet plugin install and load messages.
declare -g DUCT_PLUG_QUIET="${DUCT_PLUG_QUIET:-false}"

# plug install

# Override plugin hosting (internal & special).
declare -g _DUCT_PLUG_INSTALL_HOSTING="${DUCT_PLUG_INSTALL_HOSTING:-${_DUCT_PLUG_INSTALL_HOSTING:-"https://github.com/duct-run"}}"

# List of vendor plugins to install and update (defaults).
declare -r -a _DUCT_PLUG_INSTALL_VENDOR=()

# shellcheck disable=SC2206
# List of vendor plugins to install and update (url::tag|version).
declare -g -a DUCT_PLUG_INSTALL_VENDOR=( ${DUCT_PLUG_INSTALL_VENDOR[@]:-${_DUCT_PLUG_INSTALL_VENDOR[@]}} )

# Quiet plugin install messages.
declare -g DUCT_PLUG_INSTALL_QUIET="${DUCT_PLUG_INSTALL_QUIET:-${DUCT_PLUG_QUIET}}"

# Enable/disable plugin install and update (not recommended!).
declare -g DUCT_PLUG_INSTALL_ENABLE="${DUCT_PLUG_INSTALL_ENABLE:-true}"

# deps: duct-msg
# intl: true
# life: core
# desc: The duct plugin installer and updater.
# opts: <plugin-type>
__duct_plug_install() {
  __duct_intl

  local PLUG_INSTALL_TYPE="${1:-}"

  local -a PLUG_INSTALL_LIST=()
  local PLUG_INSTALL_DIR
  local PLUG_INSTALL_HEAD
  local PLUG_INSTALL_ITEM
  local PLUG_INSTALL_NAME
  local PLUG_INSTALL_TAG
  local PLUG_INSTALL_URL

  if [[ "$DUCT_PLUG_INSTALL_ENABLE" != true ]]
  then
    __duct_msg w "$PLUG_INSTALL_TYPE (disabled)"
    return
  fi

  case "$PLUG_INSTALL_TYPE"
  in
    core)
      PLUG_INSTALL_LIST=( "duct-core" )
      PLUG_INSTALL_DIR="$DUCT_ROOT_DIR"
    ;;
    main)
      PLUG_INSTALL_LIST=( "duct-plug-main" )
      PLUG_INSTALL_DIR="${DUCT_PLUG_DIR}/main"
    ;;
    vendor)
      PLUG_INSTALL_LIST=( "${DUCT_PLUG_INSTALL_VENDOR[@]}" )
    ;;
    *)
      __duct_msg e "'$PLUG_INSTALL_TYPE' unsupported plugin type!"
      return 1
    ;;
  esac

  for PLUG_INSTALL_ITEM in "${PLUG_INSTALL_LIST[@]}"
  do
    PLUG_INSTALL_URL="${PLUG_INSTALL_ITEM%%::*}"
    PLUG_INSTALL_TAG="${PLUG_INSTALL_ITEM##*::}"

    if [[ "$PLUG_INSTALL_TAG" == "$PLUG_INSTALL_URL" ]]
    then
      PLUG_INSTALL_TAG="devel" # TODO: change to stable before release!
    fi

    PLUG_INSTALL_NAME="${PLUG_INSTALL_URL##*/}"
    PLUG_INSTALL_NAME="${PLUG_INSTALL_NAME//.git}"
    PLUG_INSTALL_NAME="${PLUG_INSTALL_NAME##*duct-plug-}"
    PLUG_INSTALL_NAME="${PLUG_INSTALL_NAME##*duct-plugin-}"

    if [[ "$PLUG_INSTALL_TYPE" == "vendor" ]]
    then
      PLUG_INSTALL_DIR="${DUCT_PLUG_DIR}/vendor/${PLUG_INSTALL_NAME}"
    fi

    # default pluging hosting
    if [[ ! "$PLUG_INSTALL_URL" =~ ^(http(s)?|.*@) ]]
    then
      PLUG_INSTALL_URL="${_DUCT_PLUG_INSTALL_HOSTING}/${PLUG_INSTALL_URL}"
    fi

    # store
    local _MSG_MAX_LEVEL="$DUCT_MSG_MAX_LEVEL"
    if [[ "$DUCT_PLUG_INSTALL_QUIET" == true ]]
    then
      DUCT_MSG_MAX_LEVEL=0
    fi

    # add .git to url
    if [[ ! "$PLUG_INSTALL_URL" =~ \.git$ ]]
    then
      PLUG_INSTALL_URL="${PLUG_INSTALL_URL}.git"
    fi

    # check git
    if command -v git >/dev/null 2>&1
    then
      # git clone or pull
      if [[ ! -d "${PLUG_INSTALL_DIR}/.git" ]]
      then
        __duct_msg n "$PLUG_INSTALL_NAME (clone) [$PLUG_INSTALL_URL]"
        git clone --quiet "$PLUG_INSTALL_URL" "$PLUG_INSTALL_DIR" || __duct_msg e "git failed!"
      else
        __duct_msg n "$PLUG_INSTALL_NAME (pull)"
        git -C "$PLUG_INSTALL_DIR" pull --quiet --prune || __duct_msg e "git failed!"
      fi

      # git checkout
      PLUG_INSTALL_HEAD="$( git -C "$PLUG_INSTALL_DIR" describe --all --contains || __duct_msg e "git failed!" )"

      if [[ "$PLUG_INSTALL_HEAD" != "$PLUG_INSTALL_TAG" ]]
      then
        __duct_msg n "$PLUG_INSTALL_NAME (checkout) [$PLUG_INSTALL_TAG]"
        git -C "$PLUG_INSTALL_DIR" checkout --quiet "$PLUG_INSTALL_TAG" || __duct_msg e "git failed!"
      fi
    else
      __duct_msg w "git not found!"
    fi

    # restore
    DUCT_MSG_MAX_LEVEL="$_MSG_MAX_LEVEL"
  done
}
readonly -f __duct_plug_install

# plug load

# List of plugins to skip (default).
declare -r -a _DUCT_PLUG_LOAD_SKIP=( duct-none )

# Quiet plugin load messages.
declare -g DUCT_PLUG_LOAD_QUIET="${DUCT_PLUG_LOAD_QUIET:-${DUCT_PLUG_QUIET}}"

# List of plugins to skip loading.
declare -g DUCT_PLUG_LOAD_SKIP=( "${DUCT_PLUG_LOAD_SKIP[@]:-${_DUCT_PLUG_LOAD_SKIP[@]}}" )

# Run plugin inital load function.
declare -g DUCT_PLUG_LOAD_INIT="${DUCT_PLUG_LOAD_INIT:-true}"

# deps: duct-msg
# intl: true
# life: core
# desc: The duct plugin loader.
# opts: <plugin-type>
__duct_plug_load() {
  __duct_intl

  local PLUG_LOAD_TYPE="${1:-}"

  local -a PLUG_LOAD_LIST
  local PLUG_LOAD_CORE
  local PLUG_LOAD_INIT
  local PLUG_LOAD_ITEM
  local PLUG_LOAD_NAME
  local PLUG_LOAD_SKIP

  shopt -s dotglob
  shopt -s globstar

  case "$PLUG_LOAD_TYPE"
  in
    core)
      PLUG_LOAD_LIST=( "${DUCT_PLUG_DIR}/core/"**/duct-* )
    ;;
    main)
      PLUG_LOAD_LIST=( "${DUCT_PLUG_DIR}/main/"plug/**/duct-* )
    ;;
    vendor)
      # skip vendor load
      if [[ "${#DUCT_PLUG_INSTALL_VENDOR[@]}" -lt 1 ]]
      then
        return
      fi

      PLUG_LOAD_LIST=( "${DUCT_PLUG_DIR}/vendor/"*/plug/duct-* )
    ;;
    *)
      __duct_msg e "'$PLUG_LOAD_TYPE' unsupported plugin type!"
      return 1
    ;;
  esac

  [[ "$DUCT_PLUG_LOAD_QUIET" != true ]] && __duct_msg d "$PLUG_LOAD_TYPE"

  for PLUG_LOAD_ITEM in "${PLUG_LOAD_LIST[@]}"
  do
    PLUG_LOAD_NAME="${PLUG_LOAD_ITEM##*/}"
    PLUG_LOAD_INIT="__${PLUG_LOAD_NAME//-/_}_load"

    PLUG_LOAD_CORE="$( IFS="|"; printf "%s" "${DUCT_PLUG_CORE[*]}" )"

    if [[ ! "$PLUG_LOAD_NAME" =~ ^duct-[a-z]+$ ]] || [[ "$PLUG_LOAD_NAME" =~ ^($PLUG_LOAD_CORE)$ ]]
    then
      continue
    fi

    PLUG_LOAD_SKIP=$( IFS="|"; printf "%s" "${DUCT_PLUG_LOAD_SKIP[*]}" )

    # skip plugin
    if [[ "$PLUG_LOAD_NAME" =~ ^($PLUG_LOAD_SKIP)$ ]]
    then
      __duct_msg w "skip $PLUG_LOAD_NAME"
      continue
    fi

    if [[ -f "$PLUG_LOAD_ITEM" ]] && [[ -s "$PLUG_LOAD_ITEM" ]]
    then
      [[ "$DUCT_PLUG_LOAD_QUIET" != true ]] && __duct_msg d "$PLUG_LOAD_NAME"

      # shellcheck disable=SC1090
      source "$PLUG_LOAD_ITEM"

      if [[ "$DUCT_PLUG_LOAD_INIT" == true ]] && [[ "$( type -t "$PLUG_LOAD_INIT"  )" == "function"  ]]
      then
        [[ "$DUCT_PLUG_LOAD_QUIET" != true ]] && __duct_msg d "init: ${PLUG_LOAD_NAME//-/ } load"

        "$PLUG_LOAD_INIT"
      fi
    fi
  done

  shopt -u dotglob
  shopt -u globstar
}
readonly -f __duct_plug_load
