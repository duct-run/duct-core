# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2022-2023 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# duct-plug
# Handle duct plugins.

# Plugin core directory (internal).
declare -g -r _DUCT_PLUG_DIR_CORE="${DUCT_PLUG_DIR}/core"

# Plugin main directory (internal).
declare -g -r _DUCT_PLUG_DIR_MAIN="${DUCT_PLUG_DIR}/main"

# Plugin vendor directory (internal).
declare -g -r _DUCT_PLUG_DIR_VENDOR="${DUCT_PLUG_DIR}/vendor"

# Plugin hosting (internal/special).
declare -g _DUCT_PLUG_HOSTING="${DUCT_PLUG_HOSTING:-${_DUCT_PLUG_HOSTING:-"https://github.com/duct-run"}}"

# Plugin exclude regex, already loaded (internal).
declare -g -r _DUCT_PLUG_EXCLUDE="^(duct-env|duct-conf|duct-msg|duct-plug)$"

# Be quiet
declare -g DUCT_PLUG_QUIET="${DUCT_PLUG_QUIET:-false}"

# plug load

# Enable/disbale plugin loader messages.
declare -g DUCT_PLUG_LOAD_QUIET="${DUCT_PLUG_LOAD_QUIET:-${DUCT_PLUG_QUIET}}"

# deps: duct-msg
# intl: true
# life: core
# desc: Load duct plugins.
# opts: <plugin-type>
__duct_plug_load() {
  __duct_intl

  local PLUG
  local PLUG_DIR
  local PLUG_FIND
  local PLUG_GLOB
  local PLUG_NAME
  local PLUG_TYPE="${1:-}"

  shopt -s dotglob
  shopt -s globstar

  case "$PLUG_TYPE"
  in
    core)
      PLUG_DIR="$_DUCT_PLUG_DIR_CORE"
      PLUG_GLOB='**/duct-*'
    ;;
    main)
      PLUG_DIR="$_DUCT_PLUG_DIR_MAIN"
      PLUG_GLOB='plug/**/duct-*'
    ;;
    vendor)
      PLUG_DIR="$_DUCT_PLUG_DIR_VENDOR"
      PLUG_GLOB='*/plug/duct-*'

      # skip vendor load
      if [[ "${#DUCT_PLUG_INSTALL_VENDOR[@]}" -lt 1 ]]
      then
        return
      fi
    ;;
    *)
      __duct_msg e "'$PLUG_TYPE' unsupported plugin type!"
      return 1
    ;;
  esac

  # shellcheck disable=SC2206
  PLUG_FIND=( "${PLUG_DIR}/"${PLUG_GLOB} )

  if [[ "$DUCT_PLUG_LOAD_QUIET" != true ]]
  then
    __duct_msg d "$PLUG_TYPE"
  fi

  for PLUG in "${PLUG_FIND[@]}"
  do
    PLUG_NAME="${PLUG##*/}"

    if [[ ! "$PLUG_NAME" =~ ^duct-[a-z]+$ ]] || [[ "$PLUG_NAME" =~ $_DUCT_PLUG_EXCLUDE ]]
    then
      continue
    fi

    if [[ -f "$PLUG" ]] && [[ -s "$PLUG" ]]
    then

      if [[ "$DUCT_PLUG_LOAD_QUIET" != true ]]
      then
        __duct_msg d "$PLUG_NAME"
      fi

      # shellcheck disable=SC1090
      source "$PLUG"
    fi
  done

  shopt -u dotglob
  shopt -u globstar
}
readonly -f __duct_plug_load

# plug install

# Core plugins to be updated (internal).
declare -r -a _DUCT_PLUG_INSTALL_CORE=(
  duct-core
)

# Main plugins to be installed and updated (internal).
declare -a -r _DUCT_PLUG_INSTALL_MAIN=(
  duct-plug-main
)

# List of vendor plugins to be installed and updated (defaults).
declare -a -r _DUCT_PLUG_INSTALL_VENDOR=()

# shellcheck disable=SC2206
# - Preserve empty array
# List of vendor plugins to be installed and updated (url::tag).
declare -g -a DUCT_PLUG_INSTALL_VENDOR=( ${DUCT_PLUG_INSTALL_VENDOR[@]:-${_DUCT_PLUG_INSTALL_VENDOR[@]}} )

# Enable/disable plugin installer messages.
declare -g DUCT_PLUG_INSTALL_QUIET="${DUCT_PLUG_INSTALL_QUIET:-${DUCT_PLUG_QUIET}}"

# Enable/disbale plugin update.
declare -g DUCT_PLUG_INSTALL_UPDATE="${DUCT_PLUG_INSTALL_UPDATE:-true}"

# Enable/disable plugin install.
declare -g DUCT_PLUG_INSTALL_ENABLE="${DUCT_PLUG_INSTALL_ENABLE:-true}"

# deps: duct-msg
# intl: true
# life: core
# desc: Install and update duct plugins.
# opts: <plugin-type>
__duct_plug_install() {
  __duct_intl

  local -a PLUG=()
  local PLUG_DIR
  local PLUG_TAG
  local PLUG_TYPE="${1:-}"
  local PLUG_URL
  local _PLUG

  if [[ "$DUCT_PLUG_INSTALL_ENABLE" != true ]]
  then
    __duct_msg d "$PLUG_TYPE (disabled)"
    return
  fi

  case "$PLUG_TYPE"
  in
    core)
      PLUG=( "${_DUCT_PLUG_INSTALL_CORE[@]}" )
    ;;
    main)
      PLUG=( "${_DUCT_PLUG_INSTALL_MAIN[@]}" )
    ;;
    vendor)
      PLUG=( "${DUCT_PLUG_INSTALL_VENDOR[@]}" )
    ;;
    *)
      __duct_msg e "'$PLUG_TYPE' unsupported plugin type!"
      return 1
    ;;
  esac

  for _PLUG in "${PLUG[@]}"
  do
    PLUG_URL="${_PLUG%%::*}"
    PLUG_TAG="${_PLUG##*::}"

    if [[ "$PLUG_TAG" == "$PLUG_URL" ]]
    then
      PLUG_TAG="devel" # TODO: change to stable before release!
    fi

    PLUG_NAME="${PLUG_URL##*/}"
    PLUG_NAME="${PLUG_NAME//.git}"
    PLUG_NAME="${PLUG_NAME##*duct-plug-}"
    PLUG_NAME="${PLUG_NAME##*duct-plugin-}"

    case "$PLUG_TYPE"
    in
      core)
        PLUG_DIR="$DUCT_ROOT_DIR"
      ;;
      main)
        PLUG_DIR="$_DUCT_PLUG_DIR_MAIN"
      ;;
      vendor)
        PLUG_DIR="${_DUCT_PLUG_DIR_VENDOR}/${PLUG_NAME}"
      ;;
    esac

    # default pluging hosting
    if [[ ! "$PLUG_URL" =~ ^(http(s)?|.*@) ]]
    then
      PLUG_URL="${_DUCT_PLUG_HOSTING}/${PLUG_URL}"
    fi

    # store
    local _MSG_MAX_LEVEL="$DUCT_MSG_MAX_LEVEL"
    if [[ "$DUCT_PLUG_INSTALL_QUIET" == true ]]
    then
      DUCT_MSG_MAX_LEVEL=0
    fi

    # add .git to url
    if [[ ! "$PLUG_URL" =~ \.git$ ]]
    then
      PLUG_URL="${PLUG_URL}.git"
    fi

    # check git
    if command -v git >/dev/null 2>&1
    then
      # git clone or pull
      if [[ ! -d "${PLUG_DIR}/.git" ]]
      then
        __duct_msg n "$PLUG_NAME (clone) [$PLUG_URL]"
        git clone --quiet "$PLUG_URL" "$PLUG_DIR" || __duct_msg e "git failed!"
      else
        __duct_msg n "$PLUG_NAME (pull)"
        git -C "$PLUG_DIR" pull --quiet --prune || __duct_msg e "git failed!"
      fi

      # git checkout
      PLUG_HEAD="$( git -C "$PLUG_DIR" describe --all --contains || __duct_msg e "git failed!" )"

      if [[ "$PLUG_HEAD" != "$PLUG_TAG" ]]
      then
        __duct_msg n "$PLUG_NAME (checkout) [$PLUG_TAG]"
        git -C "$PLUG_DIR" checkout --quiet "$PLUG_TAG" || __duct_msg e "git failed!"
      fi
    else
      __duct_msg w "git not found!"
    fi

    # restore
    DUCT_MSG_MAX_LEVEL="$_MSG_MAX_LEVEL"
  done
}
readonly -f __duct_plug_install
