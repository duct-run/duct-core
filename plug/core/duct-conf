# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2022-2023 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# duct-conf
# Load duct environment configuration.

# Enable/disbale processing config.
declare -g DUCT_CONF_ENABLE="${DUCT_CONF_ENABLE:-true}"

# Enable/disbale config debug messages.
declare -g DUCT_CONF_QUIET="${DUCT_CONF_QUIET:-false}"

# Configuration file search list (internal).
declare -r -a _DUCT_CONF_FILES=(
  "${HOME}/.config/duct/config"
  "${HOME}/.config/duct/env"
  "${HOME}/.ductconfig"
  "${HOME}/.ductconf"
  "${HOME}/.ductenv"
)

# config

# deps: duct-msg
# intl: true
# life: core
# desc: Read and process duct environment configuration.
# opts:
__duct_conf() {
  __duct_intl

  local -a CONF_ENV
  local CONF_FILE
  local CONF_ITEM

  local CONF_ARR
  local CONF_KEY
  local CONF_MSG
  local CONF_VAL
  local CONF_VAR

  if [[ "$DUCT_CONF_ENABLE" != true ]]
  then
    return
  fi

  for CONF_FILE in "${_DUCT_CONF_FILES[@]}"
  do
    if [[ -s "$CONF_FILE" ]]
    then

      if [[ "$DUCT_CONF_QUIET" != true ]]
      then
        __duct_msg d "$CONF_FILE"
      fi

      # shellcheck disable=SC1090
      readarray -t CONF_ENV < <( ( set -x +u; source "$CONF_FILE"; set +x -u ) 2>&1 )

      for CONF_ITEM in "${CONF_ENV[@]}"
      do
        if [[ "$CONF_ITEM" =~ (DUCT_[A-Z_]+)(\[[[:alnum:][:punct:][:blank:]]+\])?=([[:alnum:][:punct:][:blank:]]+) ]]
        then
          CONF_VAR="${BASH_REMATCH[1]}"

          CONF_KEY="${BASH_REMATCH[2]}"
          CONF_ARR="$CONF_KEY"
          CONF_ARR="${CONF_ARR//\[}"
          CONF_ARR="${CONF_ARR//\]}"
          CONF_ARR="${CONF_ARR//\"}"

          CONF_VAL="${BASH_REMATCH[3]}"
          CONF_VAL="${CONF_VAL/#\'}"
          CONF_VAL="${CONF_VAL/%\'}"

          CONF_MSG="$CONF_VAL"

          if [[ "$CONF_VAR" =~ (TOKEN|SECRET|PASS) ]] || [[ "$CONF_KEY" =~ (TOKEN|SECRET|PASS) ]]
          then
            CONF_MSG="[HIDDEN]"
          fi

          if [[ "$DUCT_CONF_QUIET" != true ]]
          then
            __duct_msg d "${CONF_VAR}${CONF_KEY}=${CONF_MSG}"
          fi

          # indexed array specified
          if [[ "$CONF_KEY" =~ (\[[0-9]+\]) ]]
          then
            declare -g -a "$CONF_VAR"
            declare -g -a "${CONF_VAR}[$CONF_ARR]=${CONF_VAL}"

          # associative array
          elif [[ "$CONF_KEY" =~ (\[[[:alnum:][:punct:][:blank:]]+\]) ]]
          then
            declare -g -A "$CONF_VAR"
            declare -g -A "${CONF_VAR}[$CONF_ARR]=${CONF_VAL}"

          # indexed array
          elif [[ "$CONF_VAL" =~ ^(\()([[:alnum:][:punct:][:blank:]]+)(\))$ ]]
          then
            CONF_VAL="${BASH_REMATCH[2]}"
            declare -g -a "${CONF_VAR}=( $CONF_VAL )"

          # integer
          elif [[ "$CONF_VAL" =~ ^(0|[1-9]([0-9]+)?)$ ]]
          then
            declare -g -i "${CONF_VAR}=${CONF_VAL}"
          else
            declare -g "${CONF_VAR}=${CONF_VAL}"
          fi
        fi
      done
    fi
  done
  return
}
readonly -f __duct_conf
