# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2022 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# duct-conf
# Load duct environment configuration.

# Enable/disbale processing config.
declare -g DUCT_CONF_ENABLE="${DUCT_CONF_ENABLE:-true}"

# Enable/disbale config debug messages.
declare -g DUCT_CONF_QUIET="${DUCT_CONF_QUIET:-false}"

# Configuration file search list (internal).
declare -g -a -r _DUCT_CONF_FILES=(
  "${HOME}/.config/duct/config"
  "${HOME}/.config/duct/env"
  "${HOME}/.ductconfig"
  "${HOME}/.ductconf"
  "${HOME}/.ductenv"
)

# config

# deps: duct-msg
# intl: true
# life: core
# desc: Read and process duct environment configuration.
# opts:
__duct_conf() {
  __duct_intl

  local -a CONF_ENV
  local CONF_FILE

  if [[ "$DUCT_CONF_ENABLE" != true ]]
  then
    return
  fi

  local ENV
  local KEY
  local VAL
  local VAR
  local _KEY
  local _VAL

  for CONF_FILE in "${_DUCT_CONF_FILES[@]}"
  do
    if [[ -s "$CONF_FILE" ]]
    then

      if [[ "$DUCT_CONF_QUIET" != true ]]
      then
        __duct_msg d "$CONF_FILE"
      fi

      # shellcheck disable=SC1090
      readarray -t CONF_ENV < <( ( set -x +u; source "$CONF_FILE"; set +x -u ) 2>&1 )

      for ENV in "${CONF_ENV[@]}"
      do
        if [[ "$ENV" =~ (DUCT_[A-Z_]+)(\[[[:alnum:][:punct:][:blank:]]+\])?=([[:alnum:][:punct:][:blank:]]+) ]]
        then
          VAR="${BASH_REMATCH[1]}"
          KEY="${BASH_REMATCH[2]}"
          VAL="${BASH_REMATCH[3]}"
          VAL="${VAL/#\'}"
          VAL="${VAL/%\'}"

          _KEY="$KEY"
          _KEY="${_KEY//\[}"
          _KEY="${_KEY//\]}"
          _KEY="${_KEY//\"}"

          _VAL="$VAL"

          if [[ "$VAR" =~ (TOKEN|SECRET|PASS) ]] || [[ "$KEY" =~ (TOKEN|SECRET|PASS) ]]
          then
            _VAL="[HIDDEN]"
          fi

          if [[ "$DUCT_CONF_QUIET" != true ]]
          then
            __duct_msg d "${VAR}${KEY}=${_VAL}"
          fi

          # indexed array specified
          if [[ "$KEY" =~ (\[[0-9]+\]) ]]
          then
            declare -g -a "$VAR"
            declare -g -a "${VAR}[$_KEY]=${VAL}"
          # associative array
          elif [[ "$KEY" =~ (\[[[:alnum:][:punct:][:blank:]]+\]) ]]
          then
            declare -g -A "$VAR"
            declare -g -A "${VAR}[$_KEY]=${VAL}"
          # indexed array
          elif [[ "$VAL" =~ ^(\()([[:alnum:][:punct:][:blank:]]+)(\))$ ]]
          then
            VAL="${BASH_REMATCH[2]}"
            declare -g -a "${VAR}=( $VAL )"
          elif [[ "$VAL" =~ ^(0|[1-9]([0-9]+)?)$ ]]
          then
            declare -g -i "${VAR}=${VAL}"
          else
            declare -g "${VAR}=${VAL}"
          fi
        fi
      done
    fi
  done
  return
}
readonly -f __duct_conf
